
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004154  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800430c  0800430c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  0800430c  0800430c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800430c  0800430c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800430c  0800430c  0000530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004314  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b4  20000010  08004324  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010c4  08004324  000060c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124d2  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c2  00000000  00000000  0001850a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0001b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5a  00000000  00000000  0001c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a15b  00000000  00000000  0001d6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156fa  00000000  00000000  000377fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000994fc  00000000  00000000  0004cef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e63f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000414c  00000000  00000000  000e6438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ea584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041fc 	.word	0x080041fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080041fc 	.word	0x080041fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	@ (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	@ 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b096      	sub	sp, #88	@ 0x58
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fb75 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f849 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f8d9 	bl	8000414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000262:	f000 f8a7 	bl	80003b4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000266:	f000 f87f 	bl	8000368 <MX_NVIC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 800026a:	253c      	movs	r5, #60	@ 0x3c
 800026c:	197b      	adds	r3, r7, r5
 800026e:	4a1a      	ldr	r2, [pc, #104]	@ (80002d8 <main+0x88>)
 8000270:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000272:	c313      	stmia	r3!, {r0, r1, r4}
 8000274:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000276:	c313      	stmia	r3!, {r0, r1, r4}
 8000278:	6812      	ldr	r2, [r2, #0]
 800027a:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800027c:	197b      	adds	r3, r7, r5
 800027e:	2100      	movs	r1, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f002 ff00 	bl	8003086 <osThreadCreate>
 8000286:	0002      	movs	r2, r0
 8000288:	4b14      	ldr	r3, [pc, #80]	@ (80002dc <main+0x8c>)
 800028a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_init, osPriorityNormal, 0, 128);
 800028c:	2520      	movs	r5, #32
 800028e:	197b      	adds	r3, r7, r5
 8000290:	4a13      	ldr	r2, [pc, #76]	@ (80002e0 <main+0x90>)
 8000292:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000294:	c313      	stmia	r3!, {r0, r1, r4}
 8000296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000298:	c313      	stmia	r3!, {r0, r1, r4}
 800029a:	6812      	ldr	r2, [r2, #0]
 800029c:	601a      	str	r2, [r3, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800029e:	197b      	adds	r3, r7, r5
 80002a0:	2100      	movs	r1, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f002 feef 	bl	8003086 <osThreadCreate>
 80002a8:	0002      	movs	r2, r0
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <main+0x94>)
 80002ac:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Task2, Task2_init, osPriorityBelowNormal, 0, 128);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <main+0x98>)
 80002b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b4:	c313      	stmia	r3!, {r0, r1, r4}
 80002b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b8:	c313      	stmia	r3!, {r0, r1, r4}
 80002ba:	6812      	ldr	r2, [r2, #0]
 80002bc:	601a      	str	r2, [r3, #0]
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	0018      	movs	r0, r3
 80002c4:	f002 fedf 	bl	8003086 <osThreadCreate>
 80002c8:	0002      	movs	r2, r0
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <main+0x9c>)
 80002cc:	601a      	str	r2, [r3, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ce:	f002 fed2 	bl	8003076 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	e7fd      	b.n	80002d2 <main+0x82>
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	08004220 	.word	0x08004220
 80002dc:	20000308 	.word	0x20000308
 80002e0:	08004244 	.word	0x08004244
 80002e4:	2000030c 	.word	0x2000030c
 80002e8:	08004268 	.word	0x08004268
 80002ec:	20000310 	.word	0x20000310

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b093      	sub	sp, #76	@ 0x4c
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	2414      	movs	r4, #20
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2334      	movs	r3, #52	@ 0x34
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f003 ff4f 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	2310      	movs	r3, #16
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f003 ff48 	bl	80041a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2220      	movs	r2, #32
 8000318:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	193b      	adds	r3, r7, r4
 8000328:	0018      	movs	r0, r3
 800032a:	f000 ff7f 	bl	800122c <HAL_RCC_OscConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000332:	f000 f97d 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2203      	movs	r2, #3
 8000340:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2101      	movs	r1, #1
 8000352:	0018      	movs	r0, r3
 8000354:	f001 faf0 	bl	8001938 <HAL_RCC_ClockConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800035c:	f000 f968 	bl	8000630 <Error_Handler>
  }
}
 8000360:	46c0      	nop			@ (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b013      	add	sp, #76	@ 0x4c
 8000366:	bd90      	pop	{r4, r7, pc}

08000368 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_VDDIO2_IRQn, 3, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2103      	movs	r1, #3
 8000370:	2001      	movs	r0, #1
 8000372:	f000 fb9f 	bl	8000ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_VDDIO2_IRQn);
 8000376:	2001      	movs	r0, #1
 8000378:	f000 fbb1 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	2103      	movs	r1, #3
 8000380:	2003      	movs	r0, #3
 8000382:	f000 fb97 	bl	8000ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000386:	2003      	movs	r0, #3
 8000388:	f000 fba9 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2103      	movs	r1, #3
 8000390:	2004      	movs	r0, #4
 8000392:	f000 fb8f 	bl	8000ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000396:	2004      	movs	r0, #4
 8000398:	f000 fba1 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2103      	movs	r1, #3
 80003a0:	201c      	movs	r0, #28
 80003a2:	f000 fb87 	bl	8000ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003a6:	201c      	movs	r0, #28
 80003a8:	f000 fb99 	bl	8000ade <HAL_NVIC_EnableIRQ>
}
 80003ac:	46c0      	nop			@ (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003ba:	4a15      	ldr	r2, [pc, #84]	@ (8000410 <MX_USART2_UART_Init+0x5c>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003be:	4b13      	ldr	r3, [pc, #76]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003c0:	2296      	movs	r2, #150	@ 0x96
 80003c2:	0212      	lsls	r2, r2, #8
 80003c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b11      	ldr	r3, [pc, #68]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <MX_USART2_UART_Init+0x58>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 fe79 	bl	80020f0 <HAL_UART_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000402:	f000 f915 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000280 	.word	0x20000280
 8000410:	40004400 	.word	0x40004400

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b089      	sub	sp, #36	@ 0x24
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	240c      	movs	r4, #12
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2314      	movs	r3, #20
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 febd 	bl	80041a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042a:	4b3a      	ldr	r3, [pc, #232]	@ (8000514 <MX_GPIO_Init+0x100>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	03c9      	lsls	r1, r1, #15
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b36      	ldr	r3, [pc, #216]	@ (8000514 <MX_GPIO_Init+0x100>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	03db      	lsls	r3, r3, #15
 8000440:	4013      	ands	r3, r2
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b33      	ldr	r3, [pc, #204]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b32      	ldr	r3, [pc, #200]	@ (8000514 <MX_GPIO_Init+0x100>)
 800044c:	2180      	movs	r1, #128	@ 0x80
 800044e:	0289      	lsls	r1, r1, #10
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b2f      	ldr	r3, [pc, #188]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	029b      	lsls	r3, r3, #10
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b2c      	ldr	r3, [pc, #176]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b2b      	ldr	r3, [pc, #172]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	02c9      	lsls	r1, r1, #11
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b28      	ldr	r3, [pc, #160]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	02db      	lsls	r3, r3, #11
 8000478:	4013      	ands	r3, r2
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800047e:	2380      	movs	r3, #128	@ 0x80
 8000480:	0059      	lsls	r1, r3, #1
 8000482:	2390      	movs	r3, #144	@ 0x90
 8000484:	05db      	lsls	r3, r3, #23
 8000486:	2200      	movs	r2, #0
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fe7f 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800048e:	4b22      	ldr	r3, [pc, #136]	@ (8000518 <MX_GPIO_Init+0x104>)
 8000490:	2200      	movs	r2, #0
 8000492:	2120      	movs	r1, #32
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fe79 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2201      	movs	r2, #1
 800049e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80004ac:	193a      	adds	r2, r7, r4
 80004ae:	2390      	movs	r3, #144	@ 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fd01 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 80004ba:	0021      	movs	r1, r4
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2280      	movs	r2, #128	@ 0x80
 80004c0:	0052      	lsls	r2, r2, #1
 80004c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	000c      	movs	r4, r1
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2201      	movs	r2, #1
 80004ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 80004d8:	193a      	adds	r2, r7, r4
 80004da:	2390      	movs	r3, #144	@ 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fceb 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80004e6:	0021      	movs	r1, r4
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2220      	movs	r2, #32
 80004ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2201      	movs	r2, #1
 80004f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000500:	187b      	adds	r3, r7, r1
 8000502:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <MX_GPIO_Init+0x104>)
 8000504:	0019      	movs	r1, r3
 8000506:	0010      	movs	r0, r2
 8000508:	f000 fcd8 	bl	8000ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b009      	add	sp, #36	@ 0x24
 8000512:	bd90      	pop	{r4, r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	48000400 	.word	0x48000400

0800051c <send_defTask_mes>:

/* USER CODE BEGIN 4 */

void send_defTask_mes(){
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
	uint8_t message[] = "Message from def task\n" ;
 8000522:	003b      	movs	r3, r7
 8000524:	4a09      	ldr	r2, [pc, #36]	@ (800054c <send_defTask_mes+0x30>)
 8000526:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000528:	c313      	stmia	r3!, {r0, r1, r4}
 800052a:	ca03      	ldmia	r2!, {r0, r1}
 800052c:	c303      	stmia	r3!, {r0, r1}
 800052e:	8811      	ldrh	r1, [r2, #0]
 8000530:	8019      	strh	r1, [r3, #0]
 8000532:	7892      	ldrb	r2, [r2, #2]
 8000534:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, message, sizeof(message), 500) ;
 8000536:	23fa      	movs	r3, #250	@ 0xfa
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	0039      	movs	r1, r7
 800053c:	4804      	ldr	r0, [pc, #16]	@ (8000550 <send_defTask_mes+0x34>)
 800053e:	2217      	movs	r2, #23
 8000540:	f001 fe2a 	bl	8002198 <HAL_UART_Transmit>
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b007      	add	sp, #28
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	08004284 	.word	0x08004284
 8000550:	20000280 	.word	0x20000280

08000554 <send_Task1_mes>:

void send_Task1_mes(){
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
	uint8_t message[] = "Message from Task 1\n" ;
 800055a:	003b      	movs	r3, r7
 800055c:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <send_Task1_mes+0x2c>)
 800055e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000560:	c313      	stmia	r3!, {r0, r1, r4}
 8000562:	ca03      	ldmia	r2!, {r0, r1}
 8000564:	c303      	stmia	r3!, {r0, r1}
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, message, sizeof(message), 500) ;
 800056a:	23fa      	movs	r3, #250	@ 0xfa
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	0039      	movs	r1, r7
 8000570:	4804      	ldr	r0, [pc, #16]	@ (8000584 <send_Task1_mes+0x30>)
 8000572:	2215      	movs	r2, #21
 8000574:	f001 fe10 	bl	8002198 <HAL_UART_Transmit>
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b007      	add	sp, #28
 800057e:	bd90      	pop	{r4, r7, pc}
 8000580:	0800429c 	.word	0x0800429c
 8000584:	20000280 	.word	0x20000280

08000588 <send_Task2_mes>:

void send_Task2_mes(){
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b087      	sub	sp, #28
 800058c:	af00      	add	r7, sp, #0
	uint8_t message[] = "Message from Task 2\n" ;
 800058e:	003b      	movs	r3, r7
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <send_Task2_mes+0x2c>)
 8000592:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000594:	c313      	stmia	r3!, {r0, r1, r4}
 8000596:	ca03      	ldmia	r2!, {r0, r1}
 8000598:	c303      	stmia	r3!, {r0, r1}
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, message, sizeof(message), 500) ;
 800059e:	23fa      	movs	r3, #250	@ 0xfa
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	0039      	movs	r1, r7
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <send_Task2_mes+0x30>)
 80005a6:	2215      	movs	r2, #21
 80005a8:	f001 fdf6 	bl	8002198 <HAL_UART_Transmit>
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b007      	add	sp, #28
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	080042b4 	.word	0x080042b4
 80005b8:	20000280 	.word	0x20000280

080005bc <Task2_init>:

void Task2_init(void const * argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_init */
  /* Infinite loop */
  for(;;)
  {
	send_Task2_mes() ;
 80005c4:	f7ff ffe0 	bl	8000588 <send_Task2_mes>
    osDelay(1000);
 80005c8:	23fa      	movs	r3, #250	@ 0xfa
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 fda7 	bl	8003120 <osDelay>
	send_Task2_mes() ;
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	e7f6      	b.n	80005c4 <Task2_init+0x8>

080005d6 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin) ;
    send_defTask_mes() ;
 80005de:	f7ff ff9d 	bl	800051c <send_defTask_mes>
	osDelay(1000);
 80005e2:	23fa      	movs	r3, #250	@ 0xfa
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 fd9a 	bl	8003120 <osDelay>
    send_defTask_mes() ;
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	e7f6      	b.n	80005de <StartDefaultTask+0x8>

080005f0 <Task1_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1_init */
void Task1_init(void const * argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_init */
  /* Infinite loop */
  for(;;)
  {
	send_Task1_mes() ;
 80005f8:	f7ff ffac 	bl	8000554 <send_Task1_mes>
    osDelay(1000);
 80005fc:	23fa      	movs	r3, #250	@ 0xfa
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	0018      	movs	r0, r3
 8000602:	f002 fd8d 	bl	8003120 <osDelay>
	send_Task1_mes() ;
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	e7f6      	b.n	80005f8 <Task1_init+0x8>
	...

0800060c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d101      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800061e:	f000 f9a5 	bl	800096c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	40014800 	.word	0x40014800

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	e7fd      	b.n	8000638 <Error_Handler+0x8>

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <HAL_MspInit+0x60>)
 8000644:	699a      	ldr	r2, [r3, #24]
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <HAL_MspInit+0x60>)
 8000648:	2101      	movs	r1, #1
 800064a:	430a      	orrs	r2, r1
 800064c:	619a      	str	r2, [r3, #24]
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <HAL_MspInit+0x60>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	2201      	movs	r2, #1
 8000654:	4013      	ands	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <HAL_MspInit+0x60>)
 800065c:	69da      	ldr	r2, [r3, #28]
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <HAL_MspInit+0x60>)
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	0549      	lsls	r1, r1, #21
 8000664:	430a      	orrs	r2, r1
 8000666:	61da      	str	r2, [r3, #28]
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_MspInit+0x60>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	2380      	movs	r3, #128	@ 0x80
 800066e:	055b      	lsls	r3, r3, #21
 8000670:	4013      	ands	r3, r2
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 3, 0);
 8000676:	2305      	movs	r3, #5
 8000678:	425b      	negs	r3, r3
 800067a:	2200      	movs	r2, #0
 800067c:	2103      	movs	r1, #3
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fa18 	bl	8000ab4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000684:	2302      	movs	r3, #2
 8000686:	425b      	negs	r3, r3
 8000688:	2200      	movs	r2, #0
 800068a:	2103      	movs	r1, #3
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa11 	bl	8000ab4 <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b08b      	sub	sp, #44	@ 0x2c
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	2414      	movs	r4, #20
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2314      	movs	r3, #20
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 fd76 	bl	80041a4 <memset>
  if(huart->Instance==USART2)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <HAL_UART_MspInit+0x90>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d132      	bne.n	8000728 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_UART_MspInit+0x94>)
 80006c4:	69da      	ldr	r2, [r3, #28]
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <HAL_UART_MspInit+0x94>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	0289      	lsls	r1, r1, #10
 80006cc:	430a      	orrs	r2, r1
 80006ce:	61da      	str	r2, [r3, #28]
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_UART_MspInit+0x94>)
 80006d2:	69da      	ldr	r2, [r3, #28]
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4013      	ands	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_UART_MspInit+0x94>)
 80006e0:	695a      	ldr	r2, [r3, #20]
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HAL_UART_MspInit+0x94>)
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	0289      	lsls	r1, r1, #10
 80006e8:	430a      	orrs	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_UART_MspInit+0x94>)
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	029b      	lsls	r3, r3, #10
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006fa:	0021      	movs	r1, r4
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <HAL_UART_MspInit+0x98>)
 8000700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2203      	movs	r2, #3
 8000712:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	187a      	adds	r2, r7, r1
 800071c:	2390      	movs	r3, #144	@ 0x90
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fbca 	bl	8000ebc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b00b      	add	sp, #44	@ 0x2c
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	40004400 	.word	0x40004400
 8000734:	40021000 	.word	0x40021000
 8000738:	00008004 	.word	0x00008004

0800073c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b08c      	sub	sp, #48	@ 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800074c:	4b38      	ldr	r3, [pc, #224]	@ (8000830 <HAL_InitTick+0xf4>)
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	4b37      	ldr	r3, [pc, #220]	@ (8000830 <HAL_InitTick+0xf4>)
 8000752:	2180      	movs	r1, #128	@ 0x80
 8000754:	02c9      	lsls	r1, r1, #11
 8000756:	430a      	orrs	r2, r1
 8000758:	619a      	str	r2, [r3, #24]
 800075a:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <HAL_InitTick+0xf4>)
 800075c:	699a      	ldr	r2, [r3, #24]
 800075e:	2380      	movs	r3, #128	@ 0x80
 8000760:	02db      	lsls	r3, r3, #11
 8000762:	4013      	ands	r3, r2
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000768:	230c      	movs	r3, #12
 800076a:	18fa      	adds	r2, r7, r3
 800076c:	2410      	movs	r4, #16
 800076e:	193b      	adds	r3, r7, r4
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fa4c 	bl	8001c10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	2b00      	cmp	r3, #0
 8000782:	d104      	bne.n	800078e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000784:	f001 fa2e 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8000788:	0003      	movs	r3, r0
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800078c:	e004      	b.n	8000798 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800078e:	f001 fa29 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8000792:	0003      	movs	r3, r0
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079a:	4926      	ldr	r1, [pc, #152]	@ (8000834 <HAL_InitTick+0xf8>)
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff fcb3 	bl	8000108 <__udivsi3>
 80007a2:	0003      	movs	r3, r0
 80007a4:	3b01      	subs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80007a8:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <HAL_InitTick+0xfc>)
 80007aa:	4a24      	ldr	r2, [pc, #144]	@ (800083c <HAL_InitTick+0x100>)
 80007ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <HAL_InitTick+0xfc>)
 80007b0:	4a23      	ldr	r2, [pc, #140]	@ (8000840 <HAL_InitTick+0x104>)
 80007b2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80007b4:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <HAL_InitTick+0xfc>)
 80007b6:	6a3a      	ldr	r2, [r7, #32]
 80007b8:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <HAL_InitTick+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <HAL_InitTick+0xfc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_InitTick+0xfc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80007cc:	252b      	movs	r5, #43	@ 0x2b
 80007ce:	197c      	adds	r4, r7, r5
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <HAL_InitTick+0xfc>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fa46 	bl	8001c64 <HAL_TIM_Base_Init>
 80007d8:	0003      	movs	r3, r0
 80007da:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80007dc:	197b      	adds	r3, r7, r5
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11e      	bne.n	8000822 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80007e4:	197c      	adds	r4, r7, r5
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <HAL_InitTick+0xfc>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fa93 	bl	8001d14 <HAL_TIM_Base_Start_IT>
 80007ee:	0003      	movs	r3, r0
 80007f0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80007f2:	197b      	adds	r3, r7, r5
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d113      	bne.n	8000822 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80007fa:	2016      	movs	r0, #22
 80007fc:	f000 f96f 	bl	8000ade <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b03      	cmp	r3, #3
 8000804:	d809      	bhi.n	800081a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	0019      	movs	r1, r3
 800080c:	2016      	movs	r0, #22
 800080e:	f000 f951 	bl	8000ab4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_InitTick+0x108>)
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	e003      	b.n	8000822 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800081a:	232b      	movs	r3, #43	@ 0x2b
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000822:	232b      	movs	r3, #43	@ 0x2b
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	781b      	ldrb	r3, [r3, #0]
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b00c      	add	sp, #48	@ 0x30
 800082e:	bdb0      	pop	{r4, r5, r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	000f4240 	.word	0x000f4240
 8000838:	20000314 	.word	0x20000314
 800083c:	40014800 	.word	0x40014800
 8000840:	000003e7 	.word	0x000003e7
 8000844:	20000004 	.word	0x20000004

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	e7fd      	b.n	800084c <NMI_Handler+0x4>

08000850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	e7fd      	b.n	8000854 <HardFault_Handler+0x4>

08000858 <PVD_VDDIO2_IRQHandler>:

/**
  * @brief This function handles PVD and VDDIO2 supply comparator interrupts through EXTI lines 16 and 31.
  */
void PVD_VDDIO2_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 0 */

  /* USER CODE END PVD_VDDIO2_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800085c:	f000 fcb4 	bl	80011c8 <HAL_PWR_PVD_IRQHandler>
  HAL_PWREx_Vddio2Monitor_IRQHandler();
 8000860:	f000 fccc 	bl	80011fc <HAL_PWREx_Vddio2Monitor_IRQHandler>
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 1 */

  /* USER CODE END PVD_VDDIO2_IRQn 1 */
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800086e:	f000 f9c3 	bl	8000bf8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000888:	4b03      	ldr	r3, [pc, #12]	@ (8000898 <TIM17_IRQHandler+0x14>)
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fa8e 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	20000314 	.word	0x20000314

0800089c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <USART2_IRQHandler+0x14>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fd18 	bl	80022d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	20000280 	.word	0x20000280

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c0:	4813      	ldr	r0, [pc, #76]	@ (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c4:	f7ff fff6 	bl	80008b4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008c8:	4812      	ldr	r0, [pc, #72]	@ (8000914 <LoopForever+0x6>)
    LDR R1, [R0]
 80008ca:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008cc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <LoopForever+0xa>)
    CMP R1, R2
 80008d0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80008d2:	d105      	bne.n	80008e0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80008d4:	4811      	ldr	r0, [pc, #68]	@ (800091c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80008d6:	4912      	ldr	r1, [pc, #72]	@ (8000920 <LoopForever+0x12>)
    STR R1, [R0]
 80008d8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80008dc:	4912      	ldr	r1, [pc, #72]	@ (8000928 <LoopForever+0x1a>)
    STR R1, [R0]
 80008de:	6001      	str	r1, [r0, #0]

080008e0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	4812      	ldr	r0, [pc, #72]	@ (800092c <LoopForever+0x1e>)
  ldr r1, =_edata
 80008e2:	4913      	ldr	r1, [pc, #76]	@ (8000930 <LoopForever+0x22>)
  ldr r2, =_sidata
 80008e4:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <LoopForever+0x26>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80008f8:	4c10      	ldr	r4, [pc, #64]	@ (800093c <LoopForever+0x2e>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000906:	f003 fc55 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fca1 	bl	8000250 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000914:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000918:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800091c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000920:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000924:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000928:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000934:	08004314 	.word	0x08004314
  ldr r2, =_sbss
 8000938:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800093c:	200010c4 	.word	0x200010c4

08000940 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_IRQHandler>
	...

08000944 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_Init+0x24>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_Init+0x24>)
 800094e:	2110      	movs	r1, #16
 8000950:	430a      	orrs	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fef1 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095a:	f7ff fe6f 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x1c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	001a      	movs	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x20>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	18d2      	adds	r2, r2, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_IncTick+0x20>)
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	20000008 	.word	0x20000008
 800098c:	2000035c 	.word	0x2000035c

08000990 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b02      	ldr	r3, [pc, #8]	@ (80009a0 <HAL_GetTick+0x10>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	2000035c 	.word	0x2000035c

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b6:	d809      	bhi.n	80009cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	231f      	movs	r3, #31
 80009c0:	401a      	ands	r2, r3
 80009c2:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <__NVIC_EnableIRQ+0x30>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	4091      	lsls	r1, r2
 80009c8:	000a      	movs	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
  }
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	0002      	movs	r2, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ec:	d828      	bhi.n	8000a40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ee:	4a2f      	ldr	r2, [pc, #188]	@ (8000aac <__NVIC_SetPriority+0xd4>)
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	33c0      	adds	r3, #192	@ 0xc0
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	589b      	ldr	r3, [r3, r2]
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	0011      	movs	r1, r2
 8000a04:	2203      	movs	r2, #3
 8000a06:	400a      	ands	r2, r1
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	21ff      	movs	r1, #255	@ 0xff
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	43d2      	mvns	r2, r2
 8000a12:	401a      	ands	r2, r3
 8000a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	019b      	lsls	r3, r3, #6
 8000a1a:	22ff      	movs	r2, #255	@ 0xff
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	2303      	movs	r3, #3
 8000a26:	4003      	ands	r3, r0
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	481f      	ldr	r0, [pc, #124]	@ (8000aac <__NVIC_SetPriority+0xd4>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	33c0      	adds	r3, #192	@ 0xc0
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a3e:	e031      	b.n	8000aa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab0 <__NVIC_SetPriority+0xd8>)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0019      	movs	r1, r3
 8000a48:	230f      	movs	r3, #15
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	3b08      	subs	r3, #8
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3306      	adds	r3, #6
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	18d3      	adds	r3, r2, r3
 8000a56:	3304      	adds	r3, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1dfa      	adds	r2, r7, #7
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	0011      	movs	r1, r2
 8000a60:	2203      	movs	r2, #3
 8000a62:	400a      	ands	r2, r1
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	21ff      	movs	r1, #255	@ 0xff
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	401a      	ands	r2, r3
 8000a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	22ff      	movs	r2, #255	@ 0xff
 8000a78:	401a      	ands	r2, r3
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2303      	movs	r3, #3
 8000a82:	4003      	ands	r3, r0
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <__NVIC_SetPriority+0xd8>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	001c      	movs	r4, r3
 8000a90:	230f      	movs	r3, #15
 8000a92:	4023      	ands	r3, r4
 8000a94:	3b08      	subs	r3, #8
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	3306      	adds	r3, #6
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	18c3      	adds	r3, r0, r3
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b003      	add	sp, #12
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	210f      	movs	r1, #15
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	1c02      	adds	r2, r0, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff ff81 	bl	80009d8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b004      	add	sp, #16
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ff57 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2221      	movs	r2, #33	@ 0x21
 8000b0a:	5c9b      	ldrb	r3, [r3, r2]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d008      	beq.n	8000b24 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2204      	movs	r2, #4
 8000b16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e020      	b.n	8000b66 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	210e      	movs	r1, #14
 8000b30:	438a      	bics	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	438a      	bics	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	000a      	movs	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2221      	movs	r2, #33	@ 0x21
 8000b58:	2101      	movs	r1, #1
 8000b5a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2220      	movs	r2, #32
 8000b60:	2100      	movs	r1, #0
 8000b62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b76:	210f      	movs	r1, #15
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2221      	movs	r2, #33	@ 0x21
 8000b82:	5c9b      	ldrb	r3, [r3, r2]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d006      	beq.n	8000b98 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e028      	b.n	8000bea <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	210e      	movs	r1, #14
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	438a      	bics	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4091      	lsls	r1, r2
 8000bc4:	000a      	movs	r2, r1
 8000bc6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2221      	movs	r2, #33	@ 0x21
 8000bcc:	2101      	movs	r1, #1
 8000bce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d004      	beq.n	8000bea <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	0010      	movs	r0, r2
 8000be8:	4798      	blx	r3
    }
  }
  return status;
 8000bea:	230f      	movs	r3, #15
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	781b      	ldrb	r3, [r3, #0]
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c02:	4b6e      	ldr	r3, [pc, #440]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	2210      	movs	r2, #16
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b10      	cmp	r3, #16
 8000c0c:	d005      	beq.n	8000c1a <HAL_FLASH_IRQHandler+0x22>
 8000c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	2204      	movs	r2, #4
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d10f      	bne.n	8000c3a <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8000c1a:	4b69      	ldr	r3, [pc, #420]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8000c20:	4b67      	ldr	r3, [pc, #412]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	4252      	negs	r2, r2
 8000c26:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8000c28:	f000 f8fa 	bl	8000e20 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 f8d2 	bl	8000dd8 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000c34:	4b62      	ldr	r3, [pc, #392]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c3a:	4b60      	ldr	r3, [pc, #384]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2220      	movs	r2, #32
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b20      	cmp	r3, #32
 8000c44:	d000      	beq.n	8000c48 <HAL_FLASH_IRQHandler+0x50>
 8000c46:	e0a1      	b.n	8000d8c <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c48:	4b5c      	ldr	r3, [pc, #368]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d100      	bne.n	8000c5a <HAL_FLASH_IRQHandler+0x62>
 8000c58:	e098      	b.n	8000d8c <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8000c5a:	4b59      	ldr	r3, [pc, #356]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d132      	bne.n	8000cca <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8000c64:	4b56      	ldr	r3, [pc, #344]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	4b55      	ldr	r3, [pc, #340]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c6c:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8000c6e:	4b54      	ldr	r3, [pc, #336]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d01b      	beq.n	8000cae <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8000c76:	4b52      	ldr	r3, [pc, #328]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f8a2 	bl	8000dc8 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8000c84:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	4463      	add	r3, ip
 8000c90:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8000c92:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c98:	4b48      	ldr	r3, [pc, #288]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	4b47      	ldr	r3, [pc, #284]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	438a      	bics	r2, r1
 8000ca2:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f8ea 	bl	8000e80 <FLASH_PageErase>
 8000cac:	e06e      	b.n	8000d8c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000cba:	4b41      	ldr	r3, [pc, #260]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f880 	bl	8000dc8 <HAL_FLASH_EndOfOperationCallback>
 8000cc8:	e060      	b.n	8000d8c <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8000cca:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d10c      	bne.n	8000cee <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000cd4:	4b39      	ldr	r3, [pc, #228]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	4b38      	ldr	r3, [pc, #224]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000cda:	2104      	movs	r1, #4
 8000cdc:	438a      	bics	r2, r1
 8000cde:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 f871 	bl	8000dc8 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000ce6:	4b36      	ldr	r3, [pc, #216]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e04e      	b.n	8000d8c <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8000cee:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000cf6:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8000cf8:	4b31      	ldr	r3, [pc, #196]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d021      	beq.n	8000d44 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	1c9a      	adds	r2, r3, #2
 8000d06:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d08:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8000d10:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	0419      	lsls	r1, r3, #16
 8000d18:	0c14      	lsrs	r4, r2, #16
 8000d1a:	430c      	orrs	r4, r1
 8000d1c:	0c1d      	lsrs	r5, r3, #16
 8000d1e:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d20:	611c      	str	r4, [r3, #16]
 8000d22:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d24:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	438a      	bics	r2, r1
 8000d2e:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8000d30:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	b292      	uxth	r2, r2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 f853 	bl	8000de8 <FLASH_Program_HalfWord>
 8000d42:	e023      	b.n	8000d8c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8000d44:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d105      	bne.n	8000d5a <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 f838 	bl	8000dc8 <HAL_FLASH_EndOfOperationCallback>
 8000d58:	e011      	b.n	8000d7e <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d106      	bne.n	8000d72 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	3b02      	subs	r3, #2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 f82c 	bl	8000dc8 <HAL_FLASH_EndOfOperationCallback>
 8000d70:	e005      	b.n	8000d7e <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	3b06      	subs	r3, #6
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f825 	bl	8000dc8 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	4252      	negs	r2, r2
 8000d84:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10e      	bne.n	8000db4 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000d9c:	2107      	movs	r1, #7
 8000d9e:	438a      	bics	r2, r1
 8000da0:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_FLASH_IRQHandler+0x1c4>)
 8000da8:	4906      	ldr	r1, [pc, #24]	@ (8000dc4 <HAL_FLASH_IRQHandler+0x1cc>)
 8000daa:	400a      	ands	r2, r1
 8000dac:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	761a      	strb	r2, [r3, #24]
  }
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bdb0      	pop	{r4, r5, r7, pc}
 8000dbc:	40022000 	.word	0x40022000
 8000dc0:	20000360 	.word	0x20000360
 8000dc4:	ffffebff 	.word	0xffffebff

08000dc8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	000a      	movs	r2, r1
 8000df2:	1cbb      	adds	r3, r7, #2
 8000df4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <FLASH_Program_HalfWord+0x30>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <FLASH_Program_HalfWord+0x34>)
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <FLASH_Program_HalfWord+0x34>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1cba      	adds	r2, r7, #2
 8000e0c:	8812      	ldrh	r2, [r2, #0]
 8000e0e:	801a      	strh	r2, [r3, #0]
}
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b002      	add	sp, #8
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000360 	.word	0x20000360
 8000e1c:	40022000 	.word	0x40022000

08000e20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <FLASH_SetErrorCode+0x58>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2210      	movs	r2, #16
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b10      	cmp	r3, #16
 8000e34:	d109      	bne.n	8000e4a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <FLASH_SetErrorCode+0x5c>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <FLASH_SetErrorCode+0x5c>)
 8000e40:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2210      	movs	r2, #16
 8000e46:	4313      	orrs	r3, r2
 8000e48:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <FLASH_SetErrorCode+0x58>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d109      	bne.n	8000e6a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <FLASH_SetErrorCode+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <FLASH_SetErrorCode+0x5c>)
 8000e60:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	4313      	orrs	r3, r2
 8000e68:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e6a:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <FLASH_SetErrorCode+0x58>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
}  
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	20000360 	.word	0x20000360

08000e80 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <FLASH_PageErase+0x34>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <FLASH_PageErase+0x38>)
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <FLASH_PageErase+0x38>)
 8000e94:	2102      	movs	r1, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000e9a:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <FLASH_PageErase+0x38>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <FLASH_PageErase+0x38>)
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <FLASH_PageErase+0x38>)
 8000ea6:	2140      	movs	r1, #64	@ 0x40
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	611a      	str	r2, [r3, #16]
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000360 	.word	0x20000360
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e149      	b.n	8001160 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <HAL_GPIO_Init+0x28>
 8000ee2:	e13a      	b.n	800115a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	2201      	movs	r2, #1
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d017      	beq.n	8000f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d123      	bne.n	8000fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	58d3      	ldr	r3, [r2, r3]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	4013      	ands	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	6939      	ldr	r1, [r7, #16]
 8000fec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	43da      	mvns	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	401a      	ands	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	23c0      	movs	r3, #192	@ 0xc0
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_GPIO_Init+0x174>
 800102e:	e094      	b.n	800115a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001030:	4b51      	ldr	r3, [pc, #324]	@ (8001178 <HAL_GPIO_Init+0x2bc>)
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	4b50      	ldr	r3, [pc, #320]	@ (8001178 <HAL_GPIO_Init+0x2bc>)
 8001036:	2101      	movs	r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	4b4e      	ldr	r3, [pc, #312]	@ (8001178 <HAL_GPIO_Init+0x2bc>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2201      	movs	r2, #1
 8001042:	4013      	ands	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001048:	4a4c      	ldr	r2, [pc, #304]	@ (800117c <HAL_GPIO_Init+0x2c0>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	589b      	ldr	r3, [r3, r2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	2390      	movs	r3, #144	@ 0x90
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	429a      	cmp	r2, r3
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x1d6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a41      	ldr	r2, [pc, #260]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x1d2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a40      	ldr	r2, [pc, #256]	@ (8001184 <HAL_GPIO_Init+0x2c8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x1ce>
 8001086:	2302      	movs	r3, #2
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x1d8>
 800108a:	2305      	movs	r3, #5
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x1d8>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x1d8>
 8001092:	2300      	movs	r3, #0
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	2103      	movs	r1, #3
 8001098:	400a      	ands	r2, r1
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	@ (800117c <HAL_GPIO_Init+0x2c0>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	035b      	lsls	r3, r3, #13
 80010ca:	4013      	ands	r3, r2
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	039b      	lsls	r3, r3, #14
 80010f4:	4013      	ands	r3, r2
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	029b      	lsls	r3, r3, #10
 800111e:	4013      	ands	r3, r2
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43da      	mvns	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	4013      	ands	r3, r2
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	40da      	lsrs	r2, r3
 8001168:	1e13      	subs	r3, r2, #0
 800116a:	d000      	beq.n	800116e <HAL_GPIO_Init+0x2b2>
 800116c:	e6ae      	b.n	8000ecc <HAL_GPIO_Init+0x10>
  } 
}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b006      	add	sp, #24
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	0008      	movs	r0, r1
 8001196:	0011      	movs	r1, r2
 8001198:	1cbb      	adds	r3, r7, #2
 800119a:	1c02      	adds	r2, r0, #0
 800119c:	801a      	strh	r2, [r3, #0]
 800119e:	1c7b      	adds	r3, r7, #1
 80011a0:	1c0a      	adds	r2, r1, #0
 80011a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a4:	1c7b      	adds	r3, r7, #1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ac:	1cbb      	adds	r3, r7, #2
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b6:	1cbb      	adds	r3, r7, #2
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the  PVD_IRQHandler() or PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <HAL_PWR_PVD_IRQHandler+0x24>)
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	025b      	lsls	r3, r3, #9
 80011d4:	4013      	ands	r3, r2
 80011d6:	d005      	beq.n	80011e4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80011d8:	f000 f80a 	bl	80011f0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <HAL_PWR_PVD_IRQHandler+0x24>)
 80011de:	2280      	movs	r2, #128	@ 0x80
 80011e0:	0252      	lsls	r2, r2, #9
 80011e2:	615a      	str	r2, [r3, #20]
  }
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_PWREx_Vddio2Monitor_IRQHandler>:
  * @brief This function handles the PWR Vddio2 monitor interrupt request.
  * @note This API should be called under the VDDIO2_IRQHandler() PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWREx_Vddio2Monitor_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_VDDIO2_EXTI_GET_FLAG() != RESET)
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	da05      	bge.n	8001214 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x18>
  {
    /* PWR Vddio2 monitor interrupt user callback */
    HAL_PWREx_Vddio2MonitorCallback();
 8001208:	f000 f80a 	bl	8001220 <HAL_PWREx_Vddio2MonitorCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_VDDIO2_EXTI_CLEAR_FLAG();
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 800120e:	2280      	movs	r2, #128	@ 0x80
 8001210:	0612      	lsls	r2, r2, #24
 8001212:	615a      	str	r2, [r3, #20]
  }
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_PWREx_Vddio2MonitorCallback>:
/**
  * @brief PWR Vddio2 Monitor interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_Vddio2MonitorCallback(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWREx_Vddio2MonitorCallback could be implemented in the user file
   */
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 fb76 	bl	800192c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	d100      	bne.n	800124c <HAL_RCC_OscConfig+0x20>
 800124a:	e08e      	b.n	800136a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800124c:	4bc5      	ldr	r3, [pc, #788]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	220c      	movs	r2, #12
 8001252:	4013      	ands	r3, r2
 8001254:	2b04      	cmp	r3, #4
 8001256:	d00e      	beq.n	8001276 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001258:	4bc2      	ldr	r3, [pc, #776]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	220c      	movs	r2, #12
 800125e:	4013      	ands	r3, r2
 8001260:	2b08      	cmp	r3, #8
 8001262:	d117      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
 8001264:	4bbf      	ldr	r3, [pc, #764]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	23c0      	movs	r3, #192	@ 0xc0
 800126a:	025b      	lsls	r3, r3, #9
 800126c:	401a      	ands	r2, r3
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	429a      	cmp	r2, r3
 8001274:	d10e      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	4bbb      	ldr	r3, [pc, #748]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2380      	movs	r3, #128	@ 0x80
 800127c:	029b      	lsls	r3, r3, #10
 800127e:	4013      	ands	r3, r2
 8001280:	d100      	bne.n	8001284 <HAL_RCC_OscConfig+0x58>
 8001282:	e071      	b.n	8001368 <HAL_RCC_OscConfig+0x13c>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d000      	beq.n	800128e <HAL_RCC_OscConfig+0x62>
 800128c:	e06c      	b.n	8001368 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f000 fb4c 	bl	800192c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <HAL_RCC_OscConfig+0x80>
 800129c:	4bb1      	ldr	r3, [pc, #708]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012a2:	2180      	movs	r1, #128	@ 0x80
 80012a4:	0249      	lsls	r1, r1, #9
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e02f      	b.n	800130c <HAL_RCC_OscConfig+0xe0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10c      	bne.n	80012ce <HAL_RCC_OscConfig+0xa2>
 80012b4:	4bab      	ldr	r3, [pc, #684]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4baa      	ldr	r3, [pc, #680]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012ba:	49ab      	ldr	r1, [pc, #684]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012bc:	400a      	ands	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4ba7      	ldr	r3, [pc, #668]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012c6:	49a9      	ldr	r1, [pc, #676]	@ (800156c <HAL_RCC_OscConfig+0x340>)
 80012c8:	400a      	ands	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e01e      	b.n	800130c <HAL_RCC_OscConfig+0xe0>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d10e      	bne.n	80012f4 <HAL_RCC_OscConfig+0xc8>
 80012d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4ba2      	ldr	r3, [pc, #648]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012dc:	2180      	movs	r1, #128	@ 0x80
 80012de:	02c9      	lsls	r1, r1, #11
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	4b9f      	ldr	r3, [pc, #636]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b9e      	ldr	r3, [pc, #632]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012ea:	2180      	movs	r1, #128	@ 0x80
 80012ec:	0249      	lsls	r1, r1, #9
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0xe0>
 80012f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80012fa:	499b      	ldr	r1, [pc, #620]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	4b98      	ldr	r3, [pc, #608]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b97      	ldr	r3, [pc, #604]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001306:	4999      	ldr	r1, [pc, #612]	@ (800156c <HAL_RCC_OscConfig+0x340>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d014      	beq.n	800133e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb3c 	bl	8000990 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131e:	f7ff fb37 	bl	8000990 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	@ 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e2fd      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001330:	4b8c      	ldr	r3, [pc, #560]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0xf2>
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb27 	bl	8000990 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fb22 	bl	8000990 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e2e8      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b82      	ldr	r3, [pc, #520]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x11c>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	d100      	bne.n	8001376 <HAL_RCC_OscConfig+0x14a>
 8001374:	e06c      	b.n	8001450 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001376:	4b7b      	ldr	r3, [pc, #492]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	220c      	movs	r2, #12
 800137c:	4013      	ands	r3, r2
 800137e:	d00e      	beq.n	800139e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001380:	4b78      	ldr	r3, [pc, #480]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	220c      	movs	r2, #12
 8001386:	4013      	ands	r3, r2
 8001388:	2b08      	cmp	r3, #8
 800138a:	d11f      	bne.n	80013cc <HAL_RCC_OscConfig+0x1a0>
 800138c:	4b75      	ldr	r3, [pc, #468]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	23c0      	movs	r3, #192	@ 0xc0
 8001392:	025b      	lsls	r3, r3, #9
 8001394:	401a      	ands	r2, r3
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	429a      	cmp	r2, r3
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	4b71      	ldr	r3, [pc, #452]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_OscConfig+0x188>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e2bb      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	22f8      	movs	r2, #248	@ 0xf8
 80013ba:	4393      	bics	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	00da      	lsls	r2, r3, #3
 80013c4:	4b67      	ldr	r3, [pc, #412]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	e041      	b.n	8001450 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d024      	beq.n	800141e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b63      	ldr	r3, [pc, #396]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b62      	ldr	r3, [pc, #392]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013da:	2101      	movs	r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fad6 	bl	8000990 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fad1 	bl	8000990 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e297      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b59      	ldr	r3, [pc, #356]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d0f1      	beq.n	80013ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b57      	ldr	r3, [pc, #348]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	22f8      	movs	r2, #248	@ 0xf8
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00da      	lsls	r2, r3, #3
 8001416:	4b53      	ldr	r3, [pc, #332]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e018      	b.n	8001450 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b51      	ldr	r3, [pc, #324]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fab1 	bl	8000990 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff faac 	bl	8000990 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e272      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d1f1      	bne.n	8001434 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2208      	movs	r2, #8
 8001456:	4013      	ands	r3, r2
 8001458:	d036      	beq.n	80014c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d019      	beq.n	8001496 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001466:	4b3f      	ldr	r3, [pc, #252]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fa8f 	bl	8000990 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fa8a 	bl	8000990 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e250      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d0f1      	beq.n	8001478 <HAL_RCC_OscConfig+0x24c>
 8001494:	e018      	b.n	80014c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001496:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800149a:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800149c:	2101      	movs	r1, #1
 800149e:	438a      	bics	r2, r1
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa75 	bl	8000990 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fa70 	bl	8000990 <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e236      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014be:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f1      	bne.n	80014ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2204      	movs	r2, #4
 80014ce:	4013      	ands	r3, r2
 80014d0:	d100      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2a8>
 80014d2:	e0b5      	b.n	8001640 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d4:	201f      	movs	r0, #31
 80014d6:	183b      	adds	r3, r7, r0
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014dc:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	055b      	lsls	r3, r3, #21
 80014e4:	4013      	ands	r3, r2
 80014e6:	d110      	bne.n	800150a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	0549      	lsls	r1, r1, #21
 80014f2:	430a      	orrs	r2, r1
 80014f4:	61da      	str	r2, [r3, #28]
 80014f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	2380      	movs	r3, #128	@ 0x80
 80014fc:	055b      	lsls	r3, r3, #21
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001504:	183b      	adds	r3, r7, r0
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4013      	ands	r3, r2
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	0049      	lsls	r1, r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001524:	f7ff fa34 	bl	8000990 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fa2f 	bl	8000990 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1f5      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10f      	bne.n	8001574 <HAL_RCC_OscConfig+0x348>
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	621a      	str	r2, [r3, #32]
 8001560:	e036      	b.n	80015d0 <HAL_RCC_OscConfig+0x3a4>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	40021000 	.word	0x40021000
 8001568:	fffeffff 	.word	0xfffeffff
 800156c:	fffbffff 	.word	0xfffbffff
 8001570:	40007000 	.word	0x40007000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x36a>
 800157c:	4bca      	ldr	r3, [pc, #808]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	4bc9      	ldr	r3, [pc, #804]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	621a      	str	r2, [r3, #32]
 8001588:	4bc7      	ldr	r3, [pc, #796]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	4bc6      	ldr	r3, [pc, #792]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800158e:	2104      	movs	r1, #4
 8001590:	438a      	bics	r2, r1
 8001592:	621a      	str	r2, [r3, #32]
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x3a4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x38c>
 800159e:	4bc2      	ldr	r3, [pc, #776]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	4bc1      	ldr	r3, [pc, #772]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015a4:	2104      	movs	r1, #4
 80015a6:	430a      	orrs	r2, r1
 80015a8:	621a      	str	r2, [r3, #32]
 80015aa:	4bbf      	ldr	r3, [pc, #764]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015ac:	6a1a      	ldr	r2, [r3, #32]
 80015ae:	4bbe      	ldr	r3, [pc, #760]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	621a      	str	r2, [r3, #32]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x3a4>
 80015b8:	4bbb      	ldr	r3, [pc, #748]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	6a1a      	ldr	r2, [r3, #32]
 80015bc:	4bba      	ldr	r3, [pc, #744]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	438a      	bics	r2, r1
 80015c2:	621a      	str	r2, [r3, #32]
 80015c4:	4bb8      	ldr	r3, [pc, #736]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	4bb7      	ldr	r3, [pc, #732]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	438a      	bics	r2, r1
 80015ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d014      	beq.n	8001602 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff f9da 	bl	8000990 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff f9d5 	bl	8000990 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4aaf      	ldr	r2, [pc, #700]	@ (80018ac <HAL_RCC_OscConfig+0x680>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e19a      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	4bac      	ldr	r3, [pc, #688]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3b6>
 8001600:	e013      	b.n	800162a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff f9c5 	bl	8000990 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e009      	b.n	8001620 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff f9c0 	bl	8000990 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	4aa5      	ldr	r2, [pc, #660]	@ (80018ac <HAL_RCC_OscConfig+0x680>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e185      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	4ba1      	ldr	r3, [pc, #644]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800162a:	231f      	movs	r3, #31
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b9c      	ldr	r3, [pc, #624]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	4b9b      	ldr	r3, [pc, #620]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800163a:	499d      	ldr	r1, [pc, #628]	@ (80018b0 <HAL_RCC_OscConfig+0x684>)
 800163c:	400a      	ands	r2, r1
 800163e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	4013      	ands	r3, r2
 8001648:	d063      	beq.n	8001712 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d12a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001652:	4b95      	ldr	r3, [pc, #596]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001656:	4b94      	ldr	r3, [pc, #592]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001658:	2104      	movs	r1, #4
 800165a:	430a      	orrs	r2, r1
 800165c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800165e:	4b92      	ldr	r3, [pc, #584]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001662:	4b91      	ldr	r3, [pc, #580]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff f991 	bl	8000990 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001674:	f7ff f98c 	bl	8000990 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e152      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001686:	4b88      	ldr	r3, [pc, #544]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d0f1      	beq.n	8001674 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001690:	4b85      	ldr	r3, [pc, #532]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001694:	22f8      	movs	r2, #248	@ 0xf8
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	00da      	lsls	r2, r3, #3
 80016a0:	4b81      	ldr	r3, [pc, #516]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a6:	e034      	b.n	8001712 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	3305      	adds	r3, #5
 80016ae:	d111      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016b0:	4b7d      	ldr	r3, [pc, #500]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b4:	4b7c      	ldr	r3, [pc, #496]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016b6:	2104      	movs	r1, #4
 80016b8:	438a      	bics	r2, r1
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016bc:	4b7a      	ldr	r3, [pc, #488]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c0:	22f8      	movs	r2, #248	@ 0xf8
 80016c2:	4393      	bics	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	00da      	lsls	r2, r3, #3
 80016cc:	4b76      	ldr	r3, [pc, #472]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016d2:	e01e      	b.n	8001712 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016d4:	4b74      	ldr	r3, [pc, #464]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d8:	4b73      	ldr	r3, [pc, #460]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016da:	2104      	movs	r1, #4
 80016dc:	430a      	orrs	r2, r1
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016e0:	4b71      	ldr	r3, [pc, #452]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016e4:	4b70      	ldr	r3, [pc, #448]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	438a      	bics	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f950 	bl	8000990 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016f6:	f7ff f94b 	bl	8000990 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e111      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001708:	4b67      	ldr	r3, [pc, #412]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d1f1      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2220      	movs	r2, #32
 8001718:	4013      	ands	r3, r2
 800171a:	d05c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800171c:	4b62      	ldr	r3, [pc, #392]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	220c      	movs	r2, #12
 8001722:	4013      	ands	r3, r2
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d00e      	beq.n	8001746 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001728:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	220c      	movs	r2, #12
 800172e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001730:	2b08      	cmp	r3, #8
 8001732:	d114      	bne.n	800175e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001734:	4b5c      	ldr	r3, [pc, #368]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23c0      	movs	r3, #192	@ 0xc0
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	401a      	ands	r2, r3
 800173e:	23c0      	movs	r3, #192	@ 0xc0
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	429a      	cmp	r2, r3
 8001744:	d10b      	bne.n	800175e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001746:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	029b      	lsls	r3, r3, #10
 800174e:	4013      	ands	r3, r2
 8001750:	d040      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5a8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d03c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0e6      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01b      	beq.n	800179e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001766:	4b50      	ldr	r3, [pc, #320]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800176a:	4b4f      	ldr	r3, [pc, #316]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	0249      	lsls	r1, r1, #9
 8001770:	430a      	orrs	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f90c 	bl	8000990 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177e:	f7ff f907 	bl	8000990 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0cd      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001790:	4b45      	ldr	r3, [pc, #276]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x552>
 800179c:	e01b      	b.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800179e:	4b42      	ldr	r3, [pc, #264]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017a4:	4943      	ldr	r1, [pc, #268]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff f8f1 	bl	8000990 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b4:	f7ff f8ec 	bl	8000990 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0b2      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017c6:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ca:	2380      	movs	r3, #128	@ 0x80
 80017cc:	029b      	lsls	r3, r3, #10
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x588>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017d4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5b4>
 80017de:	e0a4      	b.n	800192a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	220c      	movs	r2, #12
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x5c2>
 80017ec:	e078      	b.n	80018e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d14c      	bne.n	8001890 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	492e      	ldr	r1, [pc, #184]	@ (80018b8 <HAL_RCC_OscConfig+0x68c>)
 80017fe:	400a      	ands	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff f8c5 	bl	8000990 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f8c0 	bl	8000990 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e086      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	049b      	lsls	r3, r3, #18
 8001826:	4013      	ands	r3, r2
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182a:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	220f      	movs	r2, #15
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <HAL_RCC_OscConfig+0x690>)
 8001844:	4013      	ands	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	431a      	orrs	r2, r3
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	0449      	lsls	r1, r1, #17
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f893 	bl	8000990 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f88e 	bl	8000990 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e054      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	049b      	lsls	r3, r3, #18
 800188a:	4013      	ands	r3, r2
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x644>
 800188e:	e04c      	b.n	800192a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001896:	4908      	ldr	r1, [pc, #32]	@ (80018b8 <HAL_RCC_OscConfig+0x68c>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff f878 	bl	8000990 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x6a6>
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	00001388 	.word	0x00001388
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	feffffff 	.word	0xfeffffff
 80018bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f866 	bl	8000990 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e02c      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_RCC_OscConfig+0x708>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	049b      	lsls	r3, r3, #18
 80018da:	4013      	ands	r3, r2
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x694>
 80018de:	e024      	b.n	800192a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e01f      	b.n	800192c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_RCC_OscConfig+0x708>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_RCC_OscConfig+0x708>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	23c0      	movs	r3, #192	@ 0xc0
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	401a      	ands	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	429a      	cmp	r2, r3
 8001906:	d10e      	bne.n	8001926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	220f      	movs	r2, #15
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	23f0      	movs	r3, #240	@ 0xf0
 800191a:	039b      	lsls	r3, r3, #14
 800191c:	401a      	ands	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b008      	add	sp, #32
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0bf      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b61      	ldr	r3, [pc, #388]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4013      	ands	r3, r2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d911      	bls.n	800197e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	4393      	bics	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0a6      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d015      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2204      	movs	r2, #4
 800198e:	4013      	ands	r3, r2
 8001990:	d006      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001992:	4b51      	ldr	r3, [pc, #324]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001998:	21e0      	movs	r1, #224	@ 0xe0
 800199a:	00c9      	lsls	r1, r1, #3
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	22f0      	movs	r2, #240	@ 0xf0
 80019a6:	4393      	bics	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	d04c      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	029b      	lsls	r3, r3, #10
 80019ce:	4013      	ands	r3, r2
 80019d0:	d120      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07a      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	049b      	lsls	r3, r3, #18
 80019e6:	4013      	ands	r3, r2
 80019e8:	d114      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06e      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	029b      	lsls	r3, r3, #10
 80019fe:	4013      	ands	r3, r2
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e062      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a06:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e05b      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a28:	f7fe ffb2 	bl	8000990 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7fe ffad 	bl	8000990 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a27      	ldr	r2, [pc, #156]	@ (8001adc <HAL_RCC_ClockConfig+0x1a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e042      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1ec      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d211      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_RCC_ClockConfig+0x19c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e020      	b.n	8001acc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	4013      	ands	r3, r2
 8001a92:	d009      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1a8>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001aa8:	f000 f820 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aac:	0001      	movs	r1, r0
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1ac>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	000a      	movs	r2, r1
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7fe fe39 	bl	800073c <HAL_InitTick>
  
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	00001388 	.word	0x00001388
 8001ae0:	fffff8ff 	.word	0xfffff8ff
 8001ae4:	080042d4 	.word	0x080042d4
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b06:	4b2d      	ldr	r3, [pc, #180]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d046      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>
 8001b16:	d848      	bhi.n	8001baa <HAL_RCC_GetSysClockFreq+0xbe>
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d002      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x36>
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d003      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x3c>
 8001b20:	e043      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b24:	613b      	str	r3, [r7, #16]
      break;
 8001b26:	e043      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	4a24      	ldr	r2, [pc, #144]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b36:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	4a22      	ldr	r2, [pc, #136]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	23c0      	movs	r3, #192	@ 0xc0
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d109      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	481a      	ldr	r0, [pc, #104]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b58:	f7fe fad6 	bl	8000108 <__udivsi3>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	001a      	movs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4353      	muls	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e01a      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	23c0      	movs	r3, #192	@ 0xc0
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	401a      	ands	r2, r3
 8001b70:	23c0      	movs	r3, #192	@ 0xc0
 8001b72:	025b      	lsls	r3, r3, #9
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d109      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001b7c:	f7fe fac4 	bl	8000108 <__udivsi3>
 8001b80:	0003      	movs	r3, r0
 8001b82:	001a      	movs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4353      	muls	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b90:	f7fe faba 	bl	8000108 <__udivsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	001a      	movs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4353      	muls	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	613b      	str	r3, [r7, #16]
      break;
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ba6:	613b      	str	r3, [r7, #16]
      break;
 8001ba8:	e002      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001baa:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bac:	613b      	str	r3, [r7, #16]
      break;
 8001bae:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bb0:	693b      	ldr	r3, [r7, #16]
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b006      	add	sp, #24
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	080042ec 	.word	0x080042ec
 8001bc8:	080042fc 	.word	0x080042fc
 8001bcc:	02dc6c00 	.word	0x02dc6c00

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001be8:	f7ff fff2 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bec:	0001      	movs	r1, r0
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	40d9      	lsrs	r1, r3
 8001bfe:	000b      	movs	r3, r1
}    
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	080042e4 	.word	0x080042e4

08001c10 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_RCC_GetClockConfig+0x4c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2203      	movs	r2, #3
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_GetClockConfig+0x4c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	22f0      	movs	r2, #240	@ 0xf0
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_RCC_GetClockConfig+0x4c>)
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	23e0      	movs	r3, #224	@ 0xe0
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_RCC_GetClockConfig+0x50>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40022000 	.word	0x40022000

08001c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e042      	b.n	8001cfc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223d      	movs	r2, #61	@ 0x3d
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223c      	movs	r2, #60	@ 0x3c
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f839 	bl	8001d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223d      	movs	r2, #61	@ 0x3d
 8001c96:	2102      	movs	r1, #2
 8001c98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	f000 f98f 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2246      	movs	r2, #70	@ 0x46
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	223e      	movs	r2, #62	@ 0x3e
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	223f      	movs	r2, #63	@ 0x3f
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2240      	movs	r2, #64	@ 0x40
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2241      	movs	r2, #65	@ 0x41
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2242      	movs	r2, #66	@ 0x42
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2243      	movs	r2, #67	@ 0x43
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2244      	movs	r2, #68	@ 0x44
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2245      	movs	r2, #69	@ 0x45
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	223d      	movs	r2, #61	@ 0x3d
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d0c:	46c0      	nop			@ (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	223d      	movs	r2, #61	@ 0x3d
 8001d20:	5c9b      	ldrb	r3, [r3, r2]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d001      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e036      	b.n	8001d9a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	223d      	movs	r2, #61	@ 0x3d
 8001d30:	2102      	movs	r1, #2
 8001d32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <HAL_TIM_Base_Start_IT+0x90>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00a      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x50>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	05db      	lsls	r3, r3, #23
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d004      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x50>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <HAL_TIM_Base_Start_IT+0x94>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d111      	bne.n	8001d88 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d010      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d86:	e007      	b.n	8001d98 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40000400 	.word	0x40000400

08001dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d021      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d01d      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4252      	negs	r2, r2
 8001ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2203      	movs	r2, #3
 8001dec:	4013      	ands	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 f8d0 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e007      	b.n	8001e0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f8c3 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 f8cf 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2204      	movs	r2, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d01e      	beq.n	8001e5e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2205      	movs	r2, #5
 8001e26:	4252      	negs	r2, r2
 8001e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	23c0      	movs	r3, #192	@ 0xc0
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 f8a9 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001e46:	e007      	b.n	8001e58 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 f89c 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 f8a8 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2208      	movs	r2, #8
 8001e62:	4013      	ands	r3, r2
 8001e64:	d021      	beq.n	8001eaa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d01d      	beq.n	8001eaa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2209      	movs	r2, #9
 8001e74:	4252      	negs	r2, r2
 8001e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2203      	movs	r2, #3
 8001e86:	4013      	ands	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f883 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f876 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 f882 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2210      	movs	r2, #16
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d022      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d01e      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2211      	movs	r2, #17
 8001ec0:	4252      	negs	r2, r2
 8001ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	23c0      	movs	r3, #192	@ 0xc0
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 f85c 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e007      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 f84f 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 f85b 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d00c      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4013      	ands	r3, r2
 8001f06:	d008      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4252      	negs	r2, r2
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe fb79 	bl	800060c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2280      	movs	r2, #128	@ 0x80
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2280      	movs	r2, #128	@ 0x80
 8001f26:	4013      	ands	r3, r2
 8001f28:	d008      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2281      	movs	r2, #129	@ 0x81
 8001f30:	4252      	negs	r2, r2
 8001f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 f8d2 	bl	80020e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2240      	movs	r2, #64	@ 0x40
 8001f40:	4013      	ands	r3, r2
 8001f42:	d00c      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2240      	movs	r2, #64	@ 0x40
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d008      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2241      	movs	r2, #65	@ 0x41
 8001f52:	4252      	negs	r2, r2
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 f82d 	bl	8001fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2220      	movs	r2, #32
 8001f62:	4013      	ands	r3, r2
 8001f64:	d00c      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d008      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2221      	movs	r2, #33	@ 0x21
 8001f74:	4252      	negs	r2, r2
 8001f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 f8a8 	bl	80020d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb0:	46c0      	nop			@ (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a37      	ldr	r2, [pc, #220]	@ (80020b8 <TIM_Base_SetConfig+0xf0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d008      	beq.n	8001ff2 <TIM_Base_SetConfig+0x2a>
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	05db      	lsls	r3, r3, #23
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d003      	beq.n	8001ff2 <TIM_Base_SetConfig+0x2a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a33      	ldr	r2, [pc, #204]	@ (80020bc <TIM_Base_SetConfig+0xf4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d108      	bne.n	8002004 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2270      	movs	r2, #112	@ 0x70
 8001ff6:	4393      	bics	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a2c      	ldr	r2, [pc, #176]	@ (80020b8 <TIM_Base_SetConfig+0xf0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d014      	beq.n	8002036 <TIM_Base_SetConfig+0x6e>
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	05db      	lsls	r3, r3, #23
 8002012:	429a      	cmp	r2, r3
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0x6e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a28      	ldr	r2, [pc, #160]	@ (80020bc <TIM_Base_SetConfig+0xf4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0x6e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a27      	ldr	r2, [pc, #156]	@ (80020c0 <TIM_Base_SetConfig+0xf8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0x6e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a26      	ldr	r2, [pc, #152]	@ (80020c4 <TIM_Base_SetConfig+0xfc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0x6e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a25      	ldr	r2, [pc, #148]	@ (80020c8 <TIM_Base_SetConfig+0x100>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <TIM_Base_SetConfig+0x104>)
 800203a:	4013      	ands	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2280      	movs	r2, #128	@ 0x80
 800204c:	4393      	bics	r3, r2
 800204e:	001a      	movs	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a11      	ldr	r2, [pc, #68]	@ (80020b8 <TIM_Base_SetConfig+0xf0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0xbe>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <TIM_Base_SetConfig+0xfc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0xbe>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <TIM_Base_SetConfig+0x100>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d103      	bne.n	800208e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4393      	bics	r3, r2
 80020a8:	001a      	movs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
  }
}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40002000 	.word	0x40002000
 80020c4:	40014400 	.word	0x40014400
 80020c8:	40014800 	.word	0x40014800
 80020cc:	fffffcff 	.word	0xfffffcff

080020d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e044      	b.n	800218c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2278      	movs	r2, #120	@ 0x78
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f7fe fac3 	bl	80006a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2224      	movs	r2, #36	@ 0x24
 800211e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	438a      	bics	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	0018      	movs	r0, r3
 800213c:	f000 fd08 	bl	8002b50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0018      	movs	r0, r3
 8002144:	f000 fbc4 	bl	80028d0 <UART_SetConfig>
 8002148:	0003      	movs	r3, r0
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e01c      	b.n	800218c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	490d      	ldr	r1, [pc, #52]	@ (8002194 <HAL_UART_Init+0xa4>)
 800215e:	400a      	ands	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	212a      	movs	r1, #42	@ 0x2a
 800216e:	438a      	bics	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 fd97 	bl	8002cb8 <UART_CheckIdleState>
 800218a:	0003      	movs	r3, r0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}
 8002194:	ffffb7ff 	.word	0xffffb7ff

08002198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	1dbb      	adds	r3, r7, #6
 80021a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d000      	beq.n	80021b2 <HAL_UART_Transmit+0x1a>
 80021b0:	e08c      	b.n	80022cc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_UART_Transmit+0x28>
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e084      	b.n	80022ce <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d109      	bne.n	80021e4 <HAL_UART_Transmit+0x4c>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2201      	movs	r2, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	d001      	beq.n	80021e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e074      	b.n	80022ce <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2284      	movs	r2, #132	@ 0x84
 80021e8:	2100      	movs	r1, #0
 80021ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2221      	movs	r2, #33	@ 0x21
 80021f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fbcd 	bl	8000990 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1dba      	adds	r2, r7, #6
 80021fe:	2150      	movs	r1, #80	@ 0x50
 8002200:	8812      	ldrh	r2, [r2, #0]
 8002202:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1dba      	adds	r2, r7, #6
 8002208:	2152      	movs	r1, #82	@ 0x52
 800220a:	8812      	ldrh	r2, [r2, #0]
 800220c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	015b      	lsls	r3, r3, #5
 8002216:	429a      	cmp	r2, r3
 8002218:	d108      	bne.n	800222c <HAL_UART_Transmit+0x94>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	e003      	b.n	8002234 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002234:	e02f      	b.n	8002296 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	0013      	movs	r3, r2
 8002240:	2200      	movs	r2, #0
 8002242:	2180      	movs	r1, #128	@ 0x80
 8002244:	f000 fde0 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002248:	1e03      	subs	r3, r0, #0
 800224a:	d004      	beq.n	8002256 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e03b      	b.n	80022ce <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	05d2      	lsls	r2, r2, #23
 8002266:	0dd2      	lsrs	r2, r2, #23
 8002268:	b292      	uxth	r2, r2
 800226a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	3302      	adds	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	e007      	b.n	8002284 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2252      	movs	r2, #82	@ 0x52
 8002288:	5a9b      	ldrh	r3, [r3, r2]
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b299      	uxth	r1, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2252      	movs	r2, #82	@ 0x52
 8002294:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2252      	movs	r2, #82	@ 0x52
 800229a:	5a9b      	ldrh	r3, [r3, r2]
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1c9      	bne.n	8002236 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	0013      	movs	r3, r2
 80022ac:	2200      	movs	r2, #0
 80022ae:	2140      	movs	r1, #64	@ 0x40
 80022b0:	f000 fdaa 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 80022b4:	1e03      	subs	r3, r0, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e005      	b.n	80022ce <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2220      	movs	r2, #32
 80022c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b008      	add	sp, #32
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b0ab      	sub	sp, #172	@ 0xac
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	22a4      	movs	r2, #164	@ 0xa4
 80022e8:	18b9      	adds	r1, r7, r2
 80022ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	20a0      	movs	r0, #160	@ 0xa0
 80022f4:	1839      	adds	r1, r7, r0
 80022f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	219c      	movs	r1, #156	@ 0x9c
 8002300:	1879      	adds	r1, r7, r1
 8002302:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002304:	0011      	movs	r1, r2
 8002306:	18bb      	adds	r3, r7, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a99      	ldr	r2, [pc, #612]	@ (8002570 <HAL_UART_IRQHandler+0x298>)
 800230c:	4013      	ands	r3, r2
 800230e:	2298      	movs	r2, #152	@ 0x98
 8002310:	18bc      	adds	r4, r7, r2
 8002312:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002314:	18bb      	adds	r3, r7, r2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d114      	bne.n	8002346 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800231c:	187b      	adds	r3, r7, r1
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2220      	movs	r2, #32
 8002322:	4013      	ands	r3, r2
 8002324:	d00f      	beq.n	8002346 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002326:	183b      	adds	r3, r7, r0
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2220      	movs	r2, #32
 800232c:	4013      	ands	r3, r2
 800232e:	d00a      	beq.n	8002346 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002334:	2b00      	cmp	r3, #0
 8002336:	d100      	bne.n	800233a <HAL_UART_IRQHandler+0x62>
 8002338:	e29e      	b.n	8002878 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	0010      	movs	r0, r2
 8002342:	4798      	blx	r3
      }
      return;
 8002344:	e298      	b.n	8002878 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002346:	2398      	movs	r3, #152	@ 0x98
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d100      	bne.n	8002352 <HAL_UART_IRQHandler+0x7a>
 8002350:	e114      	b.n	800257c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002352:	239c      	movs	r3, #156	@ 0x9c
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	d106      	bne.n	800236c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800235e:	23a0      	movs	r3, #160	@ 0xa0
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a83      	ldr	r2, [pc, #524]	@ (8002574 <HAL_UART_IRQHandler+0x29c>)
 8002366:	4013      	ands	r3, r2
 8002368:	d100      	bne.n	800236c <HAL_UART_IRQHandler+0x94>
 800236a:	e107      	b.n	800257c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800236c:	23a4      	movs	r3, #164	@ 0xa4
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	4013      	ands	r3, r2
 8002376:	d012      	beq.n	800239e <HAL_UART_IRQHandler+0xc6>
 8002378:	23a0      	movs	r3, #160	@ 0xa0
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d00b      	beq.n	800239e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2284      	movs	r2, #132	@ 0x84
 8002392:	589b      	ldr	r3, [r3, r2]
 8002394:	2201      	movs	r2, #1
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2184      	movs	r1, #132	@ 0x84
 800239c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800239e:	23a4      	movs	r3, #164	@ 0xa4
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2202      	movs	r2, #2
 80023a6:	4013      	ands	r3, r2
 80023a8:	d011      	beq.n	80023ce <HAL_UART_IRQHandler+0xf6>
 80023aa:	239c      	movs	r3, #156	@ 0x9c
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d00b      	beq.n	80023ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2202      	movs	r2, #2
 80023bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2284      	movs	r2, #132	@ 0x84
 80023c2:	589b      	ldr	r3, [r3, r2]
 80023c4:	2204      	movs	r2, #4
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2184      	movs	r1, #132	@ 0x84
 80023cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023ce:	23a4      	movs	r3, #164	@ 0xa4
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2204      	movs	r2, #4
 80023d6:	4013      	ands	r3, r2
 80023d8:	d011      	beq.n	80023fe <HAL_UART_IRQHandler+0x126>
 80023da:	239c      	movs	r3, #156	@ 0x9c
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d00b      	beq.n	80023fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2204      	movs	r2, #4
 80023ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2284      	movs	r2, #132	@ 0x84
 80023f2:	589b      	ldr	r3, [r3, r2]
 80023f4:	2202      	movs	r2, #2
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2184      	movs	r1, #132	@ 0x84
 80023fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023fe:	23a4      	movs	r3, #164	@ 0xa4
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2208      	movs	r2, #8
 8002406:	4013      	ands	r3, r2
 8002408:	d017      	beq.n	800243a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800240a:	23a0      	movs	r3, #160	@ 0xa0
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	d105      	bne.n	8002422 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002416:	239c      	movs	r3, #156	@ 0x9c
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002420:	d00b      	beq.n	800243a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2208      	movs	r2, #8
 8002428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2284      	movs	r2, #132	@ 0x84
 800242e:	589b      	ldr	r3, [r3, r2]
 8002430:	2208      	movs	r2, #8
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2184      	movs	r1, #132	@ 0x84
 8002438:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800243a:	23a4      	movs	r3, #164	@ 0xa4
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	4013      	ands	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_UART_IRQHandler+0x198>
 8002448:	23a0      	movs	r3, #160	@ 0xa0
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	04db      	lsls	r3, r3, #19
 8002452:	4013      	ands	r3, r2
 8002454:	d00c      	beq.n	8002470 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2284      	movs	r2, #132	@ 0x84
 8002464:	589b      	ldr	r3, [r3, r2]
 8002466:	2220      	movs	r2, #32
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2184      	movs	r1, #132	@ 0x84
 800246e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2284      	movs	r2, #132	@ 0x84
 8002474:	589b      	ldr	r3, [r3, r2]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d100      	bne.n	800247c <HAL_UART_IRQHandler+0x1a4>
 800247a:	e1ff      	b.n	800287c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800247c:	23a4      	movs	r3, #164	@ 0xa4
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2220      	movs	r2, #32
 8002484:	4013      	ands	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002488:	23a0      	movs	r3, #160	@ 0xa0
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2220      	movs	r2, #32
 8002490:	4013      	ands	r3, r2
 8002492:	d008      	beq.n	80024a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	0010      	movs	r0, r2
 80024a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2284      	movs	r2, #132	@ 0x84
 80024aa:	589b      	ldr	r3, [r3, r2]
 80024ac:	2194      	movs	r1, #148	@ 0x94
 80024ae:	187a      	adds	r2, r7, r1
 80024b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2240      	movs	r2, #64	@ 0x40
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b40      	cmp	r3, #64	@ 0x40
 80024be:	d004      	beq.n	80024ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2228      	movs	r2, #40	@ 0x28
 80024c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024c8:	d047      	beq.n	800255a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 fd0b 	bl	8002ee8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	4013      	ands	r3, r2
 80024dc:	2b40      	cmp	r3, #64	@ 0x40
 80024de:	d137      	bne.n	8002550 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e0:	f3ef 8310 	mrs	r3, PRIMASK
 80024e4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80024e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e8:	2090      	movs	r0, #144	@ 0x90
 80024ea:	183a      	adds	r2, r7, r0
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	2301      	movs	r3, #1
 80024f0:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f4:	f383 8810 	msr	PRIMASK, r3
}
 80024f8:	46c0      	nop			@ (mov r8, r8)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2140      	movs	r1, #64	@ 0x40
 8002506:	438a      	bics	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	183b      	adds	r3, r7, r0
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002512:	f383 8810 	msr	PRIMASK, r3
}
 8002516:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	4a14      	ldr	r2, [pc, #80]	@ (8002578 <HAL_UART_IRQHandler+0x2a0>)
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800252c:	0018      	movs	r0, r3
 800252e:	f7fe fb1e 	bl	8000b6e <HAL_DMA_Abort_IT>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d01a      	beq.n	800256c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002540:	0018      	movs	r0, r3
 8002542:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	e012      	b.n	800256c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f000 f9ad 	bl	80028a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254e:	e00d      	b.n	800256c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 f9a8 	bl	80028a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002558:	e008      	b.n	800256c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 f9a3 	bl	80028a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2284      	movs	r2, #132	@ 0x84
 8002566:	2100      	movs	r1, #0
 8002568:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800256a:	e187      	b.n	800287c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	46c0      	nop			@ (mov r8, r8)
    return;
 800256e:	e185      	b.n	800287c <HAL_UART_IRQHandler+0x5a4>
 8002570:	0000080f 	.word	0x0000080f
 8002574:	04000120 	.word	0x04000120
 8002578:	08002fb1 	.word	0x08002fb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002580:	2b01      	cmp	r3, #1
 8002582:	d000      	beq.n	8002586 <HAL_UART_IRQHandler+0x2ae>
 8002584:	e139      	b.n	80027fa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002586:	23a4      	movs	r3, #164	@ 0xa4
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	4013      	ands	r3, r2
 8002590:	d100      	bne.n	8002594 <HAL_UART_IRQHandler+0x2bc>
 8002592:	e132      	b.n	80027fa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002594:	23a0      	movs	r3, #160	@ 0xa0
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2210      	movs	r2, #16
 800259c:	4013      	ands	r3, r2
 800259e:	d100      	bne.n	80025a2 <HAL_UART_IRQHandler+0x2ca>
 80025a0:	e12b      	b.n	80027fa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2210      	movs	r2, #16
 80025a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2240      	movs	r2, #64	@ 0x40
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b40      	cmp	r3, #64	@ 0x40
 80025b6:	d000      	beq.n	80025ba <HAL_UART_IRQHandler+0x2e2>
 80025b8:	e09f      	b.n	80026fa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	217e      	movs	r1, #126	@ 0x7e
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d100      	bne.n	80025d2 <HAL_UART_IRQHandler+0x2fa>
 80025d0:	e156      	b.n	8002880 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2258      	movs	r2, #88	@ 0x58
 80025d6:	5a9b      	ldrh	r3, [r3, r2]
 80025d8:	187a      	adds	r2, r7, r1
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d300      	bcc.n	80025e2 <HAL_UART_IRQHandler+0x30a>
 80025e0:	e14e      	b.n	8002880 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	187a      	adds	r2, r7, r1
 80025e6:	215a      	movs	r1, #90	@ 0x5a
 80025e8:	8812      	ldrh	r2, [r2, #0]
 80025ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d06f      	beq.n	80026d6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f6:	f3ef 8310 	mrs	r3, PRIMASK
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002600:	2301      	movs	r3, #1
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002606:	f383 8810 	msr	PRIMASK, r3
}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	499e      	ldr	r1, [pc, #632]	@ (8002890 <HAL_UART_IRQHandler+0x5b8>)
 8002618:	400a      	ands	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800261e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002622:	f383 8810 	msr	PRIMASK, r3
}
 8002626:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002628:	f3ef 8310 	mrs	r3, PRIMASK
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800262e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002630:	677b      	str	r3, [r7, #116]	@ 0x74
 8002632:	2301      	movs	r3, #1
 8002634:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002638:	f383 8810 	msr	PRIMASK, r3
}
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	438a      	bics	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002650:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002654:	f383 8810 	msr	PRIMASK, r3
}
 8002658:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265a:	f3ef 8310 	mrs	r3, PRIMASK
 800265e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002662:	673b      	str	r3, [r7, #112]	@ 0x70
 8002664:	2301      	movs	r3, #1
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2140      	movs	r1, #64	@ 0x40
 800267c:	438a      	bics	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002682:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002686:	f383 8810 	msr	PRIMASK, r3
}
 800268a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2280      	movs	r2, #128	@ 0x80
 8002690:	2120      	movs	r1, #32
 8002692:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269a:	f3ef 8310 	mrs	r3, PRIMASK
 800269e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80026a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026a4:	2301      	movs	r3, #1
 80026a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026aa:	f383 8810 	msr	PRIMASK, r3
}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2110      	movs	r1, #16
 80026bc:	438a      	bics	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026c6:	f383 8810 	msr	PRIMASK, r3
}
 80026ca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fe fa14 	bl	8000afe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2258      	movs	r2, #88	@ 0x58
 80026e0:	5a9a      	ldrh	r2, [r3, r2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	215a      	movs	r1, #90	@ 0x5a
 80026e6:	5a5b      	ldrh	r3, [r3, r1]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0011      	movs	r1, r2
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 f8e0 	bl	80028b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026f8:	e0c2      	b.n	8002880 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2258      	movs	r2, #88	@ 0x58
 80026fe:	5a99      	ldrh	r1, [r3, r2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	225a      	movs	r2, #90	@ 0x5a
 8002704:	5a9b      	ldrh	r3, [r3, r2]
 8002706:	b29a      	uxth	r2, r3
 8002708:	208e      	movs	r0, #142	@ 0x8e
 800270a:	183b      	adds	r3, r7, r0
 800270c:	1a8a      	subs	r2, r1, r2
 800270e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	225a      	movs	r2, #90	@ 0x5a
 8002714:	5a9b      	ldrh	r3, [r3, r2]
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d100      	bne.n	800271e <HAL_UART_IRQHandler+0x446>
 800271c:	e0b2      	b.n	8002884 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800271e:	183b      	adds	r3, r7, r0
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d100      	bne.n	8002728 <HAL_UART_IRQHandler+0x450>
 8002726:	e0ad      	b.n	8002884 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002728:	f3ef 8310 	mrs	r3, PRIMASK
 800272c:	60fb      	str	r3, [r7, #12]
  return(result);
 800272e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002730:	2488      	movs	r4, #136	@ 0x88
 8002732:	193a      	adds	r2, r7, r4
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	2301      	movs	r3, #1
 8002738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4951      	ldr	r1, [pc, #324]	@ (8002894 <HAL_UART_IRQHandler+0x5bc>)
 800274e:	400a      	ands	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	193b      	adds	r3, r7, r4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f383 8810 	msr	PRIMASK, r3
}
 800275e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002760:	f3ef 8310 	mrs	r3, PRIMASK
 8002764:	61bb      	str	r3, [r7, #24]
  return(result);
 8002766:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002768:	2484      	movs	r4, #132	@ 0x84
 800276a:	193a      	adds	r2, r7, r4
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f383 8810 	msr	PRIMASK, r3
}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	438a      	bics	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	193b      	adds	r3, r7, r4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f383 8810 	msr	PRIMASK, r3
}
 8002796:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	2120      	movs	r1, #32
 800279e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ac:	f3ef 8310 	mrs	r3, PRIMASK
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b4:	2480      	movs	r4, #128	@ 0x80
 80027b6:	193a      	adds	r2, r7, r4
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	2301      	movs	r3, #1
 80027bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c0:	f383 8810 	msr	PRIMASK, r3
}
 80027c4:	46c0      	nop			@ (mov r8, r8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2110      	movs	r1, #16
 80027d2:	438a      	bics	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027ea:	183b      	adds	r3, r7, r0
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f860 	bl	80028b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027f8:	e044      	b.n	8002884 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027fa:	23a4      	movs	r3, #164	@ 0xa4
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	035b      	lsls	r3, r3, #13
 8002804:	4013      	ands	r3, r2
 8002806:	d010      	beq.n	800282a <HAL_UART_IRQHandler+0x552>
 8002808:	239c      	movs	r3, #156	@ 0x9c
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	03db      	lsls	r3, r3, #15
 8002812:	4013      	ands	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2280      	movs	r2, #128	@ 0x80
 800281c:	0352      	lsls	r2, r2, #13
 800281e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 fc06 	bl	8003034 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002828:	e02f      	b.n	800288a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800282a:	23a4      	movs	r3, #164	@ 0xa4
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2280      	movs	r2, #128	@ 0x80
 8002832:	4013      	ands	r3, r2
 8002834:	d00f      	beq.n	8002856 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002836:	23a0      	movs	r3, #160	@ 0xa0
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2280      	movs	r2, #128	@ 0x80
 800283e:	4013      	ands	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01e      	beq.n	8002888 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	0010      	movs	r0, r2
 8002852:	4798      	blx	r3
    }
    return;
 8002854:	e018      	b.n	8002888 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002856:	23a4      	movs	r3, #164	@ 0xa4
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	4013      	ands	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_UART_IRQHandler+0x5b2>
 8002862:	23a0      	movs	r3, #160	@ 0xa0
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2240      	movs	r2, #64	@ 0x40
 800286a:	4013      	ands	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fbb4 	bl	8002fde <UART_EndTransmit_IT>
    return;
 8002876:	e008      	b.n	800288a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	e006      	b.n	800288a <HAL_UART_IRQHandler+0x5b2>
    return;
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	e004      	b.n	800288a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	e002      	b.n	800288a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	e000      	b.n	800288a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002888:	46c0      	nop			@ (mov r8, r8)
  }

}
 800288a:	46bd      	mov	sp, r7
 800288c:	b02b      	add	sp, #172	@ 0xac
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	fffffeff 	.word	0xfffffeff
 8002894:	fffffedf 	.word	0xfffffedf

08002898 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80028b0:	46c0      	nop			@ (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	000a      	movs	r2, r1
 80028c2:	1cbb      	adds	r3, r7, #2
 80028c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b002      	add	sp, #8
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028d8:	231e      	movs	r3, #30
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a8d      	ldr	r2, [pc, #564]	@ (8002b34 <UART_SetConfig+0x264>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a88      	ldr	r2, [pc, #544]	@ (8002b38 <UART_SetConfig+0x268>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b3c <UART_SetConfig+0x26c>)
 800293e:	4013      	ands	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a7b      	ldr	r2, [pc, #492]	@ (8002b40 <UART_SetConfig+0x270>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d127      	bne.n	80029a6 <UART_SetConfig+0xd6>
 8002956:	4b7b      	ldr	r3, [pc, #492]	@ (8002b44 <UART_SetConfig+0x274>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	2203      	movs	r2, #3
 800295c:	4013      	ands	r3, r2
 800295e:	2b03      	cmp	r3, #3
 8002960:	d00d      	beq.n	800297e <UART_SetConfig+0xae>
 8002962:	d81b      	bhi.n	800299c <UART_SetConfig+0xcc>
 8002964:	2b02      	cmp	r3, #2
 8002966:	d014      	beq.n	8002992 <UART_SetConfig+0xc2>
 8002968:	d818      	bhi.n	800299c <UART_SetConfig+0xcc>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <UART_SetConfig+0xa4>
 800296e:	2b01      	cmp	r3, #1
 8002970:	d00a      	beq.n	8002988 <UART_SetConfig+0xb8>
 8002972:	e013      	b.n	800299c <UART_SetConfig+0xcc>
 8002974:	231f      	movs	r3, #31
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e021      	b.n	80029c2 <UART_SetConfig+0xf2>
 800297e:	231f      	movs	r3, #31
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2202      	movs	r2, #2
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e01c      	b.n	80029c2 <UART_SetConfig+0xf2>
 8002988:	231f      	movs	r3, #31
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2204      	movs	r2, #4
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	e017      	b.n	80029c2 <UART_SetConfig+0xf2>
 8002992:	231f      	movs	r3, #31
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	2208      	movs	r2, #8
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e012      	b.n	80029c2 <UART_SetConfig+0xf2>
 800299c:	231f      	movs	r3, #31
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2210      	movs	r2, #16
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e00d      	b.n	80029c2 <UART_SetConfig+0xf2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a67      	ldr	r2, [pc, #412]	@ (8002b48 <UART_SetConfig+0x278>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d104      	bne.n	80029ba <UART_SetConfig+0xea>
 80029b0:	231f      	movs	r3, #31
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e003      	b.n	80029c2 <UART_SetConfig+0xf2>
 80029ba:	231f      	movs	r3, #31
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2210      	movs	r2, #16
 80029c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d15c      	bne.n	8002a88 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80029ce:	231f      	movs	r3, #31
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d015      	beq.n	8002a04 <UART_SetConfig+0x134>
 80029d8:	dc18      	bgt.n	8002a0c <UART_SetConfig+0x13c>
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d00d      	beq.n	80029fa <UART_SetConfig+0x12a>
 80029de:	dc15      	bgt.n	8002a0c <UART_SetConfig+0x13c>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <UART_SetConfig+0x11a>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d005      	beq.n	80029f4 <UART_SetConfig+0x124>
 80029e8:	e010      	b.n	8002a0c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ea:	f7ff f8fb 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80029ee:	0003      	movs	r3, r0
 80029f0:	61bb      	str	r3, [r7, #24]
        break;
 80029f2:	e012      	b.n	8002a1a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029f4:	4b55      	ldr	r3, [pc, #340]	@ (8002b4c <UART_SetConfig+0x27c>)
 80029f6:	61bb      	str	r3, [r7, #24]
        break;
 80029f8:	e00f      	b.n	8002a1a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029fa:	f7ff f877 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 80029fe:	0003      	movs	r3, r0
 8002a00:	61bb      	str	r3, [r7, #24]
        break;
 8002a02:	e00a      	b.n	8002a1a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	61bb      	str	r3, [r7, #24]
        break;
 8002a0a:	e006      	b.n	8002a1a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a10:	231e      	movs	r3, #30
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
        break;
 8002a18:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d100      	bne.n	8002a22 <UART_SetConfig+0x152>
 8002a20:	e07a      	b.n	8002b18 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	18d2      	adds	r2, r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f7fd fb67 	bl	8000108 <__udivsi3>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d91c      	bls.n	8002a7e <UART_SetConfig+0x1ae>
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	025b      	lsls	r3, r3, #9
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d217      	bcs.n	8002a7e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	200e      	movs	r0, #14
 8002a54:	183b      	adds	r3, r7, r0
 8002a56:	210f      	movs	r1, #15
 8002a58:	438a      	bics	r2, r1
 8002a5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2207      	movs	r2, #7
 8002a64:	4013      	ands	r3, r2
 8002a66:	b299      	uxth	r1, r3
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	183a      	adds	r2, r7, r0
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	183a      	adds	r2, r7, r0
 8002a78:	8812      	ldrh	r2, [r2, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
 8002a7c:	e04c      	b.n	8002b18 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002a7e:	231e      	movs	r3, #30
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e047      	b.n	8002b18 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a88:	231f      	movs	r3, #31
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d015      	beq.n	8002abe <UART_SetConfig+0x1ee>
 8002a92:	dc18      	bgt.n	8002ac6 <UART_SetConfig+0x1f6>
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00d      	beq.n	8002ab4 <UART_SetConfig+0x1e4>
 8002a98:	dc15      	bgt.n	8002ac6 <UART_SetConfig+0x1f6>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <UART_SetConfig+0x1d4>
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d005      	beq.n	8002aae <UART_SetConfig+0x1de>
 8002aa2:	e010      	b.n	8002ac6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f7ff f89e 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	61bb      	str	r3, [r7, #24]
        break;
 8002aac:	e012      	b.n	8002ad4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aae:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <UART_SetConfig+0x27c>)
 8002ab0:	61bb      	str	r3, [r7, #24]
        break;
 8002ab2:	e00f      	b.n	8002ad4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ab4:	f7ff f81a 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	61bb      	str	r3, [r7, #24]
        break;
 8002abc:	e00a      	b.n	8002ad4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	61bb      	str	r3, [r7, #24]
        break;
 8002ac4:	e006      	b.n	8002ad4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aca:	231e      	movs	r3, #30
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
        break;
 8002ad2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01e      	beq.n	8002b18 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	085a      	lsrs	r2, r3, #1
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	18d2      	adds	r2, r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0010      	movs	r0, r2
 8002aec:	f7fd fb0c 	bl	8000108 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	d90a      	bls.n	8002b10 <UART_SetConfig+0x240>
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	025b      	lsls	r3, r3, #9
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d205      	bcs.n	8002b10 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	e003      	b.n	8002b18 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002b10:	231e      	movs	r3, #30
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b24:	231e      	movs	r3, #30
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	781b      	ldrb	r3, [r3, #0]
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b008      	add	sp, #32
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	efff69f3 	.word	0xefff69f3
 8002b38:	ffffcfff 	.word	0xffffcfff
 8002b3c:	fffff4ff 	.word	0xfffff4ff
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40004400 	.word	0x40004400
 8002b4c:	007a1200 	.word	0x007a1200

08002b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <UART_AdvFeatureConfig+0x144>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a43      	ldr	r2, [pc, #268]	@ (8002c98 <UART_AdvFeatureConfig+0x148>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a3b      	ldr	r2, [pc, #236]	@ (8002c9c <UART_AdvFeatureConfig+0x14c>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a34      	ldr	r2, [pc, #208]	@ (8002ca0 <UART_AdvFeatureConfig+0x150>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	2210      	movs	r2, #16
 8002be6:	4013      	ands	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca4 <UART_AdvFeatureConfig+0x154>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	2220      	movs	r2, #32
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d00b      	beq.n	8002c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4a25      	ldr	r2, [pc, #148]	@ (8002ca8 <UART_AdvFeatureConfig+0x158>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	2240      	movs	r2, #64	@ 0x40
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d01d      	beq.n	8002c6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	@ (8002cac <UART_AdvFeatureConfig+0x15c>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	035b      	lsls	r3, r3, #13
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10b      	bne.n	8002c6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <UART_AdvFeatureConfig+0x160>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	4013      	ands	r3, r2
 8002c72:	d00b      	beq.n	8002c8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb4 <UART_AdvFeatureConfig+0x164>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  }
}
 8002c8c:	46c0      	nop			@ (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b002      	add	sp, #8
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	ffff7fff 	.word	0xffff7fff
 8002c98:	fffdffff 	.word	0xfffdffff
 8002c9c:	fffeffff 	.word	0xfffeffff
 8002ca0:	fffbffff 	.word	0xfffbffff
 8002ca4:	ffffefff 	.word	0xffffefff
 8002ca8:	ffffdfff 	.word	0xffffdfff
 8002cac:	ffefffff 	.word	0xffefffff
 8002cb0:	ff9fffff 	.word	0xff9fffff
 8002cb4:	fff7ffff 	.word	0xfff7ffff

08002cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b092      	sub	sp, #72	@ 0x48
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2284      	movs	r2, #132	@ 0x84
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cc8:	f7fd fe62 	bl	8000990 <HAL_GetTick>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d12c      	bne.n	8002d38 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	0391      	lsls	r1, r2, #14
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4a46      	ldr	r2, [pc, #280]	@ (8002e00 <UART_CheckIdleState+0x148>)
 8002ce8:	9200      	str	r2, [sp, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f000 f88c 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d021      	beq.n	8002d38 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cfe:	2301      	movs	r3, #1
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2180      	movs	r1, #128	@ 0x80
 8002d16:	438a      	bics	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	f383 8810 	msr	PRIMASK, r3
}
 8002d24:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2278      	movs	r2, #120	@ 0x78
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e05f      	b.n	8002df8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d146      	bne.n	8002dd4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d48:	2280      	movs	r2, #128	@ 0x80
 8002d4a:	03d1      	lsls	r1, r2, #15
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e00 <UART_CheckIdleState+0x148>)
 8002d50:	9200      	str	r2, [sp, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f000 f858 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d03b      	beq.n	8002dd4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d60:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d62:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d66:	2301      	movs	r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4921      	ldr	r1, [pc, #132]	@ (8002e04 <UART_CheckIdleState+0x14c>)
 8002d7e:	400a      	ands	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d94:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d98:	2301      	movs	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	438a      	bics	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2280      	movs	r2, #128	@ 0x80
 8002dc4:	2120      	movs	r1, #32
 8002dc6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2278      	movs	r2, #120	@ 0x78
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e011      	b.n	8002df8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	2120      	movs	r1, #32
 8002de0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2278      	movs	r2, #120	@ 0x78
 8002df2:	2100      	movs	r1, #0
 8002df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b010      	add	sp, #64	@ 0x40
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	01ffffff 	.word	0x01ffffff
 8002e04:	fffffedf 	.word	0xfffffedf

08002e08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e18:	e051      	b.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	d04e      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	f7fd fdb6 	bl	8000990 <HAL_GetTick>
 8002e24:	0002      	movs	r2, r0
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d302      	bcc.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e051      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2204      	movs	r2, #4
 8002e42:	4013      	ands	r3, r2
 8002e44:	d03b      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b80      	cmp	r3, #128	@ 0x80
 8002e4a:	d038      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b40      	cmp	r3, #64	@ 0x40
 8002e50:	d035      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d111      	bne.n	8002e84 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2208      	movs	r2, #8
 8002e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f83c 	bl	8002ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2284      	movs	r2, #132	@ 0x84
 8002e74:	2108      	movs	r1, #8
 8002e76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2278      	movs	r2, #120	@ 0x78
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e02c      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	401a      	ands	r2, r3
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d112      	bne.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 f81f 	bl	8002ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2284      	movs	r2, #132	@ 0x84
 8002eae:	2120      	movs	r1, #32
 8002eb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2278      	movs	r2, #120	@ 0x78
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e00f      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	425a      	negs	r2, r3
 8002ece:	4153      	adcs	r3, r2
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d09e      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	@ 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef4:	617b      	str	r3, [r7, #20]
  return(result);
 8002ef6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002efa:	2301      	movs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4926      	ldr	r1, [pc, #152]	@ (8002fac <UART_EndRxTransfer+0xc4>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f22:	f3ef 8310 	mrs	r3, PRIMASK
 8002f26:	623b      	str	r3, [r7, #32]
  return(result);
 8002f28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d118      	bne.n	8002f8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f60:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f66:	2301      	movs	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			@ (mov r8, r8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	438a      	bics	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b00e      	add	sp, #56	@ 0x38
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	fffffedf 	.word	0xfffffedf

08002fb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	225a      	movs	r2, #90	@ 0x5a
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2252      	movs	r2, #82	@ 0x52
 8002fca:	2100      	movs	r1, #0
 8002fcc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff fc69 	bl	80028a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fea:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f383 8810 	msr	PRIMASK, r3
}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2140      	movs	r1, #64	@ 0x40
 8003008:	438a      	bics	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f7ff fc36 	bl	8002898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800302c:	46c0      	nop			@ (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b006      	add	sp, #24
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	0002      	movs	r2, r0
 800304c:	1dbb      	adds	r3, r7, #6
 800304e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003054:	1dbb      	adds	r3, r7, #6
 8003056:	2200      	movs	r2, #0
 8003058:	5e9b      	ldrsh	r3, [r3, r2]
 800305a:	2b84      	cmp	r3, #132	@ 0x84
 800305c:	d006      	beq.n	800306c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800305e:	1dbb      	adds	r3, r7, #6
 8003060:	2200      	movs	r2, #0
 8003062:	5e9a      	ldrsh	r2, [r3, r2]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	18d3      	adds	r3, r2, r3
 8003068:	3303      	adds	r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800306c:	68fb      	ldr	r3, [r7, #12]
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bd80      	pop	{r7, pc}

08003076 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800307a:	f000 faa5 	bl	80035c8 <vTaskStartScheduler>
  
  return osOK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003088:	b089      	sub	sp, #36	@ 0x24
 800308a:	af04      	add	r7, sp, #16
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <osThreadCreate+0x54>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01c      	beq.n	80030da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685c      	ldr	r4, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691e      	ldr	r6, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2208      	movs	r2, #8
 80030b0:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff ffc6 	bl	8003044 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030c0:	6839      	ldr	r1, [r7, #0]
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	9201      	str	r2, [sp, #4]
 80030c6:	9000      	str	r0, [sp, #0]
 80030c8:	000b      	movs	r3, r1
 80030ca:	0032      	movs	r2, r6
 80030cc:	0029      	movs	r1, r5
 80030ce:	0020      	movs	r0, r4
 80030d0:	f000 f8e3 	bl	800329a <xTaskCreateStatic>
 80030d4:	0003      	movs	r3, r0
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e01d      	b.n	8003116 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685c      	ldr	r4, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030e6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2208      	movs	r2, #8
 80030ec:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ee:	0018      	movs	r0, r3
 80030f0:	f7ff ffa8 	bl	8003044 <makeFreeRtosPriority>
 80030f4:	0001      	movs	r1, r0
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	230c      	movs	r3, #12
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	9100      	str	r1, [sp, #0]
 8003100:	0013      	movs	r3, r2
 8003102:	0032      	movs	r2, r6
 8003104:	0029      	movs	r1, r5
 8003106:	0020      	movs	r0, r4
 8003108:	f000 f90d 	bl	8003326 <xTaskCreate>
 800310c:	0003      	movs	r3, r0
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b005      	add	sp, #20
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003120 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <osDelay+0x16>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	e000      	b.n	8003138 <osDelay+0x18>
 8003136:	2301      	movs	r3, #1
 8003138:	0018      	movs	r0, r3
 800313a:	f000 fa1f 	bl	800357c <vTaskDelay>
  
  return osOK;
 800313e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}

08003148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3308      	adds	r3, #8
 8003154:	001a      	movs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	4252      	negs	r2, r2
 8003160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3308      	adds	r3, #8
 8003166:	001a      	movs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3308      	adds	r3, #8
 8003170:	001a      	movs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}

08003184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b002      	add	sp, #8
 8003198:	bd80      	pop	{r7, pc}

0800319a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}

080031de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	d103      	bne.n	80031fc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e00c      	b.n	8003216 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3308      	adds	r3, #8
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e002      	b.n	800320a <vListInsert+0x2c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d2f6      	bcs.n	8003204 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	601a      	str	r2, [r3, #0]
}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}

0800324a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6852      	ldr	r2, [r2, #4]
 800326a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d103      	bne.n	800327e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}

0800329a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800329a:	b590      	push	{r4, r7, lr}
 800329c:	b08d      	sub	sp, #52	@ 0x34
 800329e:	af04      	add	r7, sp, #16
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <xTaskCreateStatic+0x1a>
 80032ae:	b672      	cpsid	i
 80032b0:	46c0      	nop			@ (mov r8, r8)
 80032b2:	e7fd      	b.n	80032b0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80032b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <xTaskCreateStatic+0x26>
 80032ba:	b672      	cpsid	i
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	e7fd      	b.n	80032bc <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032c0:	2354      	movs	r3, #84	@ 0x54
 80032c2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b54      	cmp	r3, #84	@ 0x54
 80032c8:	d002      	beq.n	80032d0 <xTaskCreateStatic+0x36>
 80032ca:	b672      	cpsid	i
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	e7fd      	b.n	80032cc <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d020      	beq.n	8003318 <xTaskCreateStatic+0x7e>
 80032d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01d      	beq.n	8003318 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032de:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2251      	movs	r2, #81	@ 0x51
 80032ea:	2102      	movs	r1, #2
 80032ec:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032ee:	683c      	ldr	r4, [r7, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	2300      	movs	r3, #0
 80032f8:	9303      	str	r3, [sp, #12]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	9302      	str	r3, [sp, #8]
 80032fe:	2318      	movs	r3, #24
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	0023      	movs	r3, r4
 800330a:	f000 f859 	bl	80033c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 f8cf 	bl	80034b4 <prvAddNewTaskToReadyList>
 8003316:	e001      	b.n	800331c <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800331c:	69bb      	ldr	r3, [r7, #24]
	}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b009      	add	sp, #36	@ 0x24
 8003324:	bd90      	pop	{r4, r7, pc}

08003326 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003326:	b590      	push	{r4, r7, lr}
 8003328:	b08d      	sub	sp, #52	@ 0x34
 800332a:	af04      	add	r7, sp, #16
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	1dbb      	adds	r3, r7, #6
 8003334:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003336:	1dbb      	adds	r3, r7, #6
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fd87 	bl	8003e50 <pvPortMalloc>
 8003342:	0003      	movs	r3, r0
 8003344:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800334c:	2054      	movs	r0, #84	@ 0x54
 800334e:	f000 fd7f 	bl	8003e50 <pvPortMalloc>
 8003352:	0003      	movs	r3, r0
 8003354:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
 8003362:	e006      	b.n	8003372 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 fe1a 	bl	8003fa0 <vPortFree>
 800336c:	e001      	b.n	8003372 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01a      	beq.n	80033ae <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2251      	movs	r2, #81	@ 0x51
 800337c:	2100      	movs	r1, #0
 800337e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003380:	1dbb      	adds	r3, r7, #6
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	683c      	ldr	r4, [r7, #0]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	2300      	movs	r3, #0
 800338c:	9303      	str	r3, [sp, #12]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	9302      	str	r3, [sp, #8]
 8003392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	0023      	movs	r3, r4
 800339c:	f000 f810 	bl	80033c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 f886 	bl	80034b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033a8:	2301      	movs	r3, #1
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	e002      	b.n	80033b4 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033ae:	2301      	movs	r3, #1
 80033b0:	425b      	negs	r3, r3
 80033b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033b4:	69bb      	ldr	r3, [r7, #24]
	}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b009      	add	sp, #36	@ 0x24
 80033bc:	bd90      	pop	{r4, r7, pc}
	...

080033c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4936      	ldr	r1, [pc, #216]	@ (80034b0 <prvInitialiseNewTask+0xf0>)
 80033d6:	468c      	mov	ip, r1
 80033d8:	4463      	add	r3, ip
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	18d3      	adds	r3, r2, r3
 80033de:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2207      	movs	r2, #7
 80033e4:	4393      	bics	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2207      	movs	r2, #7
 80033ec:	4013      	ands	r3, r2
 80033ee:	d002      	beq.n	80033f6 <prvInitialiseNewTask+0x36>
 80033f0:	b672      	cpsid	i
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	e7fd      	b.n	80033f2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e013      	b.n	8003424 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	18d3      	adds	r3, r2, r3
 8003402:	7818      	ldrb	r0, [r3, #0]
 8003404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003406:	2134      	movs	r1, #52	@ 0x34
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	18d3      	adds	r3, r2, r3
 800340c:	185b      	adds	r3, r3, r1
 800340e:	1c02      	adds	r2, r0, #0
 8003410:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	18d3      	adds	r3, r2, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	d9e8      	bls.n	80033fc <prvInitialiseNewTask+0x3c>
 800342a:	e000      	b.n	800342e <prvInitialiseNewTask+0x6e>
		{
			break;
 800342c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	2243      	movs	r2, #67	@ 0x43
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d901      	bls.n	8003440 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800343c:	2306      	movs	r3, #6
 800343e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344e:	2200      	movs	r2, #0
 8003450:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003454:	3304      	adds	r3, #4
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fe94 	bl	8003184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	3318      	adds	r3, #24
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff fe8f 	bl	8003184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800346a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	2207      	movs	r2, #7
 8003470:	1ad2      	subs	r2, r2, r3
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	2200      	movs	r2, #0
 8003480:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003484:	2250      	movs	r2, #80	@ 0x50
 8003486:	2100      	movs	r1, #0
 8003488:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 fbab 	bl	8003bec <pxPortInitialiseStack>
 8003496:	0002      	movs	r2, r0
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <prvInitialiseNewTask+0xe8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a8:	46c0      	nop			@ (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b006      	add	sp, #24
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	3fffffff 	.word	0x3fffffff

080034b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034bc:	f000 fc30 	bl	8003d20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034c0:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <prvAddNewTaskToReadyList+0xb0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	4b27      	ldr	r3, [pc, #156]	@ (8003564 <prvAddNewTaskToReadyList+0xb0>)
 80034c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80034ca:	4b27      	ldr	r3, [pc, #156]	@ (8003568 <prvAddNewTaskToReadyList+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034d2:	4b25      	ldr	r3, [pc, #148]	@ (8003568 <prvAddNewTaskToReadyList+0xb4>)
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034d8:	4b22      	ldr	r3, [pc, #136]	@ (8003564 <prvAddNewTaskToReadyList+0xb0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d110      	bne.n	8003502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034e0:	f000 fa70 	bl	80039c4 <prvInitialiseTaskLists>
 80034e4:	e00d      	b.n	8003502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034e6:	4b21      	ldr	r3, [pc, #132]	@ (800356c <prvAddNewTaskToReadyList+0xb8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <prvAddNewTaskToReadyList+0xb4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d802      	bhi.n	8003502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <prvAddNewTaskToReadyList+0xb4>)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003502:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <prvAddNewTaskToReadyList+0xbc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <prvAddNewTaskToReadyList+0xbc>)
 800350a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003510:	4b18      	ldr	r3, [pc, #96]	@ (8003574 <prvAddNewTaskToReadyList+0xc0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d903      	bls.n	8003520 <prvAddNewTaskToReadyList+0x6c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <prvAddNewTaskToReadyList+0xc0>)
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003524:	0013      	movs	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	189b      	adds	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4a12      	ldr	r2, [pc, #72]	@ (8003578 <prvAddNewTaskToReadyList+0xc4>)
 800352e:	189a      	adds	r2, r3, r2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	0019      	movs	r1, r3
 8003536:	0010      	movs	r0, r2
 8003538:	f7ff fe2f 	bl	800319a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800353c:	f000 fc02 	bl	8003d44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003540:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <prvAddNewTaskToReadyList+0xb8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003548:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <prvAddNewTaskToReadyList+0xb4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	429a      	cmp	r2, r3
 8003554:	d201      	bcs.n	800355a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003556:	f000 fbd3 	bl	8003d00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	20000480 	.word	0x20000480
 8003568:	20000380 	.word	0x20000380
 800356c:	2000048c 	.word	0x2000048c
 8003570:	2000049c 	.word	0x2000049c
 8003574:	20000488 	.word	0x20000488
 8003578:	20000384 	.word	0x20000384

0800357c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d011      	beq.n	80035b2 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800358e:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <vTaskDelay+0x48>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <vTaskDelay+0x20>
 8003596:	b672      	cpsid	i
 8003598:	46c0      	nop			@ (mov r8, r8)
 800359a:	e7fd      	b.n	8003598 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800359c:	f000 f862 	bl	8003664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2100      	movs	r1, #0
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 facd 	bl	8003b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035aa:	f000 f867 	bl	800367c <xTaskResumeAll>
 80035ae:	0003      	movs	r3, r0
 80035b0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80035b8:	f000 fba2 	bl	8003d00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200004a8 	.word	0x200004a8

080035c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b089      	sub	sp, #36	@ 0x24
 80035cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035d6:	003a      	movs	r2, r7
 80035d8:	1d39      	adds	r1, r7, #4
 80035da:	2308      	movs	r3, #8
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	0018      	movs	r0, r3
 80035e0:	f7fc fe1e 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035e4:	683c      	ldr	r4, [r7, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	4918      	ldr	r1, [pc, #96]	@ (800364c <vTaskStartScheduler+0x84>)
 80035ec:	4818      	ldr	r0, [pc, #96]	@ (8003650 <vTaskStartScheduler+0x88>)
 80035ee:	9202      	str	r2, [sp, #8]
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2300      	movs	r3, #0
 80035f8:	0022      	movs	r2, r4
 80035fa:	f7ff fe4e 	bl	800329a <xTaskCreateStatic>
 80035fe:	0002      	movs	r2, r0
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <vTaskStartScheduler+0x8c>)
 8003602:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003604:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <vTaskStartScheduler+0x8c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800360c:	2301      	movs	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e001      	b.n	8003616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d10d      	bne.n	8003638 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800361c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800361e:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <vTaskStartScheduler+0x90>)
 8003620:	2201      	movs	r2, #1
 8003622:	4252      	negs	r2, r2
 8003624:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003626:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <vTaskStartScheduler+0x94>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800362c:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <vTaskStartScheduler+0x98>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003632:	f000 fb41 	bl	8003cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003636:	e005      	b.n	8003644 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	d102      	bne.n	8003644 <vTaskStartScheduler+0x7c>
 800363e:	b672      	cpsid	i
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	e7fd      	b.n	8003640 <vTaskStartScheduler+0x78>
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b005      	add	sp, #20
 800364a:	bd90      	pop	{r4, r7, pc}
 800364c:	080042cc 	.word	0x080042cc
 8003650:	080039a5 	.word	0x080039a5
 8003654:	200004a4 	.word	0x200004a4
 8003658:	200004a0 	.word	0x200004a0
 800365c:	2000048c 	.word	0x2000048c
 8003660:	20000484 	.word	0x20000484

08003664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003668:	4b03      	ldr	r3, [pc, #12]	@ (8003678 <vTaskSuspendAll+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	4b02      	ldr	r3, [pc, #8]	@ (8003678 <vTaskSuspendAll+0x14>)
 8003670:	601a      	str	r2, [r3, #0]
}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200004a8 	.word	0x200004a8

0800367c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800368a:	4b3a      	ldr	r3, [pc, #232]	@ (8003774 <xTaskResumeAll+0xf8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <xTaskResumeAll+0x1c>
 8003692:	b672      	cpsid	i
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	e7fd      	b.n	8003694 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003698:	f000 fb42 	bl	8003d20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800369c:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <xTaskResumeAll+0xf8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	4b34      	ldr	r3, [pc, #208]	@ (8003774 <xTaskResumeAll+0xf8>)
 80036a4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a6:	4b33      	ldr	r3, [pc, #204]	@ (8003774 <xTaskResumeAll+0xf8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d15b      	bne.n	8003766 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036ae:	4b32      	ldr	r3, [pc, #200]	@ (8003778 <xTaskResumeAll+0xfc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d057      	beq.n	8003766 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b6:	e02f      	b.n	8003718 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036b8:	4b30      	ldr	r3, [pc, #192]	@ (800377c <xTaskResumeAll+0x100>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3318      	adds	r3, #24
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fdc0 	bl	800324a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3304      	adds	r3, #4
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7ff fdbb 	bl	800324a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	4b29      	ldr	r3, [pc, #164]	@ (8003780 <xTaskResumeAll+0x104>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d903      	bls.n	80036e8 <xTaskResumeAll+0x6c>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e4:	4b26      	ldr	r3, [pc, #152]	@ (8003780 <xTaskResumeAll+0x104>)
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ec:	0013      	movs	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4a23      	ldr	r2, [pc, #140]	@ (8003784 <xTaskResumeAll+0x108>)
 80036f6:	189a      	adds	r2, r3, r2
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3304      	adds	r3, #4
 80036fc:	0019      	movs	r1, r3
 80036fe:	0010      	movs	r0, r2
 8003700:	f7ff fd4b 	bl	800319a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003708:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <xTaskResumeAll+0x10c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003712:	4b1e      	ldr	r3, [pc, #120]	@ (800378c <xTaskResumeAll+0x110>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003718:	4b18      	ldr	r3, [pc, #96]	@ (800377c <xTaskResumeAll+0x100>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1cb      	bne.n	80036b8 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003726:	f000 f9e9 	bl	8003afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <xTaskResumeAll+0x114>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00f      	beq.n	8003756 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003736:	f000 f82d 	bl	8003794 <xTaskIncrementTick>
 800373a:	1e03      	subs	r3, r0, #0
 800373c:	d002      	beq.n	8003744 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800373e:	4b13      	ldr	r3, [pc, #76]	@ (800378c <xTaskResumeAll+0x110>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f2      	bne.n	8003736 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8003750:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <xTaskResumeAll+0x114>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003756:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <xTaskResumeAll+0x110>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003762:	f000 facd 	bl	8003d00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003766:	f000 faed 	bl	8003d44 <vPortExitCritical>

	return xAlreadyYielded;
 800376a:	68bb      	ldr	r3, [r7, #8]
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200004a8 	.word	0x200004a8
 8003778:	20000480 	.word	0x20000480
 800377c:	20000440 	.word	0x20000440
 8003780:	20000488 	.word	0x20000488
 8003784:	20000384 	.word	0x20000384
 8003788:	20000380 	.word	0x20000380
 800378c:	20000494 	.word	0x20000494
 8003790:	20000490 	.word	0x20000490

08003794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800379e:	4b4d      	ldr	r3, [pc, #308]	@ (80038d4 <xTaskIncrementTick+0x140>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d000      	beq.n	80037a8 <xTaskIncrementTick+0x14>
 80037a6:	e084      	b.n	80038b2 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037a8:	4b4b      	ldr	r3, [pc, #300]	@ (80038d8 <xTaskIncrementTick+0x144>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037b0:	4b49      	ldr	r3, [pc, #292]	@ (80038d8 <xTaskIncrementTick+0x144>)
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d118      	bne.n	80037ee <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037bc:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <xTaskIncrementTick+0x148>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <xTaskIncrementTick+0x38>
 80037c6:	b672      	cpsid	i
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	e7fd      	b.n	80037c8 <xTaskIncrementTick+0x34>
 80037cc:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <xTaskIncrementTick+0x148>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b43      	ldr	r3, [pc, #268]	@ (80038e0 <xTaskIncrementTick+0x14c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <xTaskIncrementTick+0x148>)
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	4b41      	ldr	r3, [pc, #260]	@ (80038e0 <xTaskIncrementTick+0x14c>)
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4b40      	ldr	r3, [pc, #256]	@ (80038e4 <xTaskIncrementTick+0x150>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	4b3f      	ldr	r3, [pc, #252]	@ (80038e4 <xTaskIncrementTick+0x150>)
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f000 f987 	bl	8003afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ee:	4b3e      	ldr	r3, [pc, #248]	@ (80038e8 <xTaskIncrementTick+0x154>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d34e      	bcc.n	8003896 <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f8:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <xTaskIncrementTick+0x148>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <xTaskIncrementTick+0x72>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xTaskIncrementTick+0x74>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380c:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <xTaskIncrementTick+0x154>)
 800380e:	2201      	movs	r2, #1
 8003810:	4252      	negs	r2, r2
 8003812:	601a      	str	r2, [r3, #0]
					break;
 8003814:	e03f      	b.n	8003896 <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003816:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <xTaskIncrementTick+0x148>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d203      	bcs.n	8003836 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800382e:	4b2e      	ldr	r3, [pc, #184]	@ (80038e8 <xTaskIncrementTick+0x154>)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
						break;
 8003834:	e02f      	b.n	8003896 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3304      	adds	r3, #4
 800383a:	0018      	movs	r0, r3
 800383c:	f7ff fd05 	bl	800324a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	3318      	adds	r3, #24
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff fcfc 	bl	800324a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003856:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <xTaskIncrementTick+0x158>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d903      	bls.n	8003866 <xTaskIncrementTick+0xd2>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003862:	4b22      	ldr	r3, [pc, #136]	@ (80038ec <xTaskIncrementTick+0x158>)
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386a:	0013      	movs	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	189b      	adds	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4a1f      	ldr	r2, [pc, #124]	@ (80038f0 <xTaskIncrementTick+0x15c>)
 8003874:	189a      	adds	r2, r3, r2
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3304      	adds	r3, #4
 800387a:	0019      	movs	r1, r3
 800387c:	0010      	movs	r0, r2
 800387e:	f7ff fc8c 	bl	800319a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003886:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <xTaskIncrementTick+0x160>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	429a      	cmp	r2, r3
 800388e:	d3b3      	bcc.n	80037f8 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003894:	e7b0      	b.n	80037f8 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003896:	4b17      	ldr	r3, [pc, #92]	@ (80038f4 <xTaskIncrementTick+0x160>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389c:	4914      	ldr	r1, [pc, #80]	@ (80038f0 <xTaskIncrementTick+0x15c>)
 800389e:	0013      	movs	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	585b      	ldr	r3, [r3, r1]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d907      	bls.n	80038bc <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80038ac:	2301      	movs	r3, #1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e004      	b.n	80038bc <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <xTaskIncrementTick+0x164>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <xTaskIncrementTick+0x164>)
 80038ba:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038bc:	4b0f      	ldr	r3, [pc, #60]	@ (80038fc <xTaskIncrementTick+0x168>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038c8:	697b      	ldr	r3, [r7, #20]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b006      	add	sp, #24
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	200004a8 	.word	0x200004a8
 80038d8:	20000484 	.word	0x20000484
 80038dc:	20000438 	.word	0x20000438
 80038e0:	2000043c 	.word	0x2000043c
 80038e4:	20000498 	.word	0x20000498
 80038e8:	200004a0 	.word	0x200004a0
 80038ec:	20000488 	.word	0x20000488
 80038f0:	20000384 	.word	0x20000384
 80038f4:	20000380 	.word	0x20000380
 80038f8:	20000490 	.word	0x20000490
 80038fc:	20000494 	.word	0x20000494

08003900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003906:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <vTaskSwitchContext+0x90>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800390e:	4b21      	ldr	r3, [pc, #132]	@ (8003994 <vTaskSwitchContext+0x94>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003914:	e038      	b.n	8003988 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8003916:	4b1f      	ldr	r3, [pc, #124]	@ (8003994 <vTaskSwitchContext+0x94>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800391c:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <vTaskSwitchContext+0x98>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	e008      	b.n	8003936 <vTaskSwitchContext+0x36>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <vTaskSwitchContext+0x30>
 800392a:	b672      	cpsid	i
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	e7fd      	b.n	800392c <vTaskSwitchContext+0x2c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	4919      	ldr	r1, [pc, #100]	@ (800399c <vTaskSwitchContext+0x9c>)
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	0013      	movs	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	189b      	adds	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	585b      	ldr	r3, [r3, r1]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ed      	beq.n	8003924 <vTaskSwitchContext+0x24>
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	0013      	movs	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	189b      	adds	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4a12      	ldr	r2, [pc, #72]	@ (800399c <vTaskSwitchContext+0x9c>)
 8003954:	189b      	adds	r3, r3, r2
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	429a      	cmp	r2, r3
 800396c:	d104      	bne.n	8003978 <vTaskSwitchContext+0x78>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <vTaskSwitchContext+0xa0>)
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <vTaskSwitchContext+0x98>)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200004a8 	.word	0x200004a8
 8003994:	20000494 	.word	0x20000494
 8003998:	20000488 	.word	0x20000488
 800399c:	20000384 	.word	0x20000384
 80039a0:	20000380 	.word	0x20000380

080039a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039ac:	f000 f84e 	bl	8003a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039b0:	4b03      	ldr	r3, [pc, #12]	@ (80039c0 <prvIdleTask+0x1c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d9f9      	bls.n	80039ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80039b8:	f000 f9a2 	bl	8003d00 <vPortYield>
		prvCheckTasksWaitingTermination();
 80039bc:	e7f6      	b.n	80039ac <prvIdleTask+0x8>
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	20000384 	.word	0x20000384

080039c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	e00c      	b.n	80039ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	0013      	movs	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4a14      	ldr	r2, [pc, #80]	@ (8003a2c <prvInitialiseTaskLists+0x68>)
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	0018      	movs	r0, r3
 80039e0:	f7ff fbb2 	bl	8003148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3301      	adds	r3, #1
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d9ef      	bls.n	80039d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <prvInitialiseTaskLists+0x6c>)
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff fba8 	bl	8003148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <prvInitialiseTaskLists+0x70>)
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff fba4 	bl	8003148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a00:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <prvInitialiseTaskLists+0x74>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7ff fba0 	bl	8003148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <prvInitialiseTaskLists+0x78>)
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7ff fb9c 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <prvInitialiseTaskLists+0x7c>)
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7ff fb98 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a18:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <prvInitialiseTaskLists+0x80>)
 8003a1a:	4a05      	ldr	r2, [pc, #20]	@ (8003a30 <prvInitialiseTaskLists+0x6c>)
 8003a1c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <prvInitialiseTaskLists+0x84>)
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <prvInitialiseTaskLists+0x70>)
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000384 	.word	0x20000384
 8003a30:	20000410 	.word	0x20000410
 8003a34:	20000424 	.word	0x20000424
 8003a38:	20000440 	.word	0x20000440
 8003a3c:	20000454 	.word	0x20000454
 8003a40:	2000046c 	.word	0x2000046c
 8003a44:	20000438 	.word	0x20000438
 8003a48:	2000043c 	.word	0x2000043c

08003a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a52:	e01a      	b.n	8003a8a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003a54:	f000 f964 	bl	8003d20 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a58:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <prvCheckTasksWaitingTermination+0x50>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff fbf0 	bl	800324a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <prvCheckTasksWaitingTermination+0x54>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <prvCheckTasksWaitingTermination+0x54>)
 8003a72:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <prvCheckTasksWaitingTermination+0x58>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <prvCheckTasksWaitingTermination+0x58>)
 8003a7c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003a7e:	f000 f961 	bl	8003d44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 f80f 	bl	8003aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <prvCheckTasksWaitingTermination+0x58>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e0      	bne.n	8003a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	46c0      	nop			@ (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000454 	.word	0x20000454
 8003aa0:	20000480 	.word	0x20000480
 8003aa4:	20000468 	.word	0x20000468

08003aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2251      	movs	r2, #81	@ 0x51
 8003ab4:	5c9b      	ldrb	r3, [r3, r2]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fa6e 	bl	8003fa0 <vPortFree>
				vPortFree( pxTCB );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fa6a 	bl	8003fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003acc:	e011      	b.n	8003af2 <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2251      	movs	r2, #81	@ 0x51
 8003ad2:	5c9b      	ldrb	r3, [r3, r2]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d104      	bne.n	8003ae2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 fa60 	bl	8003fa0 <vPortFree>
	}
 8003ae0:	e007      	b.n	8003af2 <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2251      	movs	r2, #81	@ 0x51
 8003ae6:	5c9b      	ldrb	r3, [r3, r2]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d002      	beq.n	8003af2 <prvDeleteTCB+0x4a>
 8003aec:	b672      	cpsid	i
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	e7fd      	b.n	8003aee <prvDeleteTCB+0x46>
	}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b002      	add	sp, #8
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b02:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <prvResetNextTaskUnblockTime+0x40>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <prvResetNextTaskUnblockTime+0x14>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <prvResetNextTaskUnblockTime+0x16>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <prvResetNextTaskUnblockTime+0x44>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4252      	negs	r2, r2
 8003b1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b1e:	e008      	b.n	8003b32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <prvResetNextTaskUnblockTime+0x40>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <prvResetNextTaskUnblockTime+0x44>)
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b002      	add	sp, #8
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	20000438 	.word	0x20000438
 8003b40:	200004a0 	.word	0x200004a0

08003b44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b54:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff fb75 	bl	800324a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3301      	adds	r3, #1
 8003b64:	d10b      	bne.n	8003b7e <prvAddCurrentTaskToDelayedList+0x3a>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	1d1a      	adds	r2, r3, #4
 8003b72:	4b1a      	ldr	r3, [pc, #104]	@ (8003bdc <prvAddCurrentTaskToDelayedList+0x98>)
 8003b74:	0011      	movs	r1, r2
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7ff fb0f 	bl	800319a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b7c:	e026      	b.n	8003bcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	18d3      	adds	r3, r2, r3
 8003b84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b86:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d209      	bcs.n	8003baa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b96:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	0010      	movs	r0, r2
 8003ba4:	f7ff fb1b 	bl	80031de <vListInsert>
}
 8003ba8:	e010      	b.n	8003bcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003baa:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	0010      	movs	r0, r2
 8003bb8:	f7ff fb11 	bl	80031de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d202      	bcs.n	8003bcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	601a      	str	r2, [r3, #0]
}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b004      	add	sp, #16
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000484 	.word	0x20000484
 8003bd8:	20000380 	.word	0x20000380
 8003bdc:	2000046c 	.word	0x2000046c
 8003be0:	2000043c 	.word	0x2000043c
 8003be4:	20000438 	.word	0x20000438
 8003be8:	200004a0 	.word	0x200004a0

08003bec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2280      	movs	r2, #128	@ 0x80
 8003c02:	0452      	lsls	r2, r2, #17
 8003c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3b04      	subs	r3, #4
 8003c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3b04      	subs	r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c18:	4a08      	ldr	r2, [pc, #32]	@ (8003c3c <pxPortInitialiseStack+0x50>)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3b14      	subs	r3, #20
 8003c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b20      	subs	r3, #32
 8003c2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	08003c41 	.word	0x08003c41

08003c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <prvTaskExitError+0x2c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	d002      	beq.n	8003c58 <prvTaskExitError+0x18>
 8003c52:	b672      	cpsid	i
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	e7fd      	b.n	8003c54 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003c58:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0fc      	beq.n	8003c5c <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2000000c 	.word	0x2000000c

08003c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	0000      	movs	r0, r0
 8003c7c:	0000      	movs	r0, r0
	...

08003c80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003c80:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb0 <pxCurrentTCBConst2>)
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	3020      	adds	r0, #32
 8003c88:	f380 8809 	msr	PSP, r0
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f380 8814 	msr	CONTROL, r0
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003c98:	46ae      	mov	lr, r5
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	bc04      	pop	{r2}
 8003c9e:	b662      	cpsie	i
 8003ca0:	4718      	bx	r3
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	46c0      	nop			@ (mov r8, r8)

08003cb0 <pxCurrentTCBConst2>:
 8003cb0:	20000380 	.word	0x20000380
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
 8003cb6:	46c0      	nop			@ (mov r8, r8)

08003cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <xPortStartScheduler+0x40>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <xPortStartScheduler+0x40>)
 8003cc2:	21ff      	movs	r1, #255	@ 0xff
 8003cc4:	0409      	lsls	r1, r1, #16
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <xPortStartScheduler+0x40>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <xPortStartScheduler+0x40>)
 8003cd0:	21ff      	movs	r1, #255	@ 0xff
 8003cd2:	0609      	lsls	r1, r1, #24
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003cd8:	f000 f898 	bl	8003e0c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cdc:	4b07      	ldr	r3, [pc, #28]	@ (8003cfc <xPortStartScheduler+0x44>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003ce2:	f7ff ffcd 	bl	8003c80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ce6:	f7ff fe0b 	bl	8003900 <vTaskSwitchContext>
	prvTaskExitError();
 8003cea:	f7ff ffa9 	bl	8003c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	e000ed20 	.word	0xe000ed20
 8003cfc:	2000000c 	.word	0x2000000c

08003d00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <vPortYield+0x1c>)
 8003d06:	2280      	movs	r2, #128	@ 0x80
 8003d08:	0552      	lsls	r2, r2, #21
 8003d0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003d0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003d10:	f3bf 8f6f 	isb	sy
}
 8003d14:	46c0      	nop			@ (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003d24:	b672      	cpsid	i
    uxCriticalNesting++;
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <vPortEnterCritical+0x20>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <vPortEnterCritical+0x20>)
 8003d2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003d30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003d34:	f3bf 8f6f 	isb	sy
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	2000000c 	.word	0x2000000c

08003d44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <vPortExitCritical+0x2c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <vPortExitCritical+0x12>
 8003d50:	b672      	cpsid	i
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	e7fd      	b.n	8003d52 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <vPortExitCritical+0x2c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	1e5a      	subs	r2, r3, #1
 8003d5c:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <vPortExitCritical+0x2c>)
 8003d5e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003d60:	4b03      	ldr	r3, [pc, #12]	@ (8003d70 <vPortExitCritical+0x2c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d100      	bne.n	8003d6a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8003d68:	b662      	cpsie	i
    }
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	2000000c 	.word	0x2000000c

08003d74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003d74:	f3ef 8010 	mrs	r0, PRIMASK
 8003d78:	b672      	cpsid	i
 8003d7a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	0018      	movs	r0, r3

08003d80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003d80:	f380 8810 	msr	PRIMASK, r0
 8003d84:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003d86:	46c0      	nop			@ (mov r8, r8)
	...

08003d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d90:	f3ef 8009 	mrs	r0, PSP
 8003d94:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <pxCurrentTCBConst>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	3820      	subs	r0, #32
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d9e:	4644      	mov	r4, r8
 8003da0:	464d      	mov	r5, r9
 8003da2:	4656      	mov	r6, sl
 8003da4:	465f      	mov	r7, fp
 8003da6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003da8:	b508      	push	{r3, lr}
 8003daa:	b672      	cpsid	i
 8003dac:	f7ff fda8 	bl	8003900 <vTaskSwitchContext>
 8003db0:	b662      	cpsie	i
 8003db2:	bc0c      	pop	{r2, r3}
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	6808      	ldr	r0, [r1, #0]
 8003db8:	3010      	adds	r0, #16
 8003dba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003dbc:	46a0      	mov	r8, r4
 8003dbe:	46a9      	mov	r9, r5
 8003dc0:	46b2      	mov	sl, r6
 8003dc2:	46bb      	mov	fp, r7
 8003dc4:	f380 8809 	msr	PSP, r0
 8003dc8:	3820      	subs	r0, #32
 8003dca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003dcc:	4718      	bx	r3
 8003dce:	46c0      	nop			@ (mov r8, r8)

08003dd0 <pxCurrentTCBConst>:
 8003dd0:	20000380 	.word	0x20000380
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46c0      	nop			@ (mov r8, r8)

08003dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dde:	f7ff ffc9 	bl	8003d74 <ulSetInterruptMaskFromISR>
 8003de2:	0003      	movs	r3, r0
 8003de4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003de6:	f7ff fcd5 	bl	8003794 <xTaskIncrementTick>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d003      	beq.n	8003df6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <SysTick_Handler+0x30>)
 8003df0:	2280      	movs	r2, #128	@ 0x80
 8003df2:	0552      	lsls	r2, r2, #21
 8003df4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff ffc1 	bl	8003d80 <vClearInterruptMaskFromISR>
}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b002      	add	sp, #8
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <prvSetupTimerInterrupt+0x34>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <prvSetupTimerInterrupt+0x38>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <prvSetupTimerInterrupt+0x3c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	22fa      	movs	r2, #250	@ 0xfa
 8003e22:	0091      	lsls	r1, r2, #2
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7fc f96f 	bl	8000108 <__udivsi3>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <prvSetupTimerInterrupt+0x40>)
 8003e30:	3a01      	subs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003e34:	4b02      	ldr	r3, [pc, #8]	@ (8003e40 <prvSetupTimerInterrupt+0x34>)
 8003e36:	2207      	movs	r2, #7
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	e000e010 	.word	0xe000e010
 8003e44:	e000e018 	.word	0xe000e018
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	e000e014 	.word	0xe000e014

08003e50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003e5c:	f7ff fc02 	bl	8003664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e60:	4b4a      	ldr	r3, [pc, #296]	@ (8003f8c <pvPortMalloc+0x13c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e68:	f000 f8e4 	bl	8004034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e6c:	4b48      	ldr	r3, [pc, #288]	@ (8003f90 <pvPortMalloc+0x140>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4013      	ands	r3, r2
 8003e74:	d000      	beq.n	8003e78 <pvPortMalloc+0x28>
 8003e76:	e07b      	b.n	8003f70 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d013      	beq.n	8003ea6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8003e7e:	2208      	movs	r2, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2207      	movs	r2, #7
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2207      	movs	r2, #7
 8003e92:	4393      	bics	r3, r2
 8003e94:	3308      	adds	r3, #8
 8003e96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d002      	beq.n	8003ea6 <pvPortMalloc+0x56>
 8003ea0:	b672      	cpsid	i
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	e7fd      	b.n	8003ea2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d061      	beq.n	8003f70 <pvPortMalloc+0x120>
 8003eac:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <pvPortMalloc+0x144>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d85c      	bhi.n	8003f70 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003eb6:	4b38      	ldr	r3, [pc, #224]	@ (8003f98 <pvPortMalloc+0x148>)
 8003eb8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003eba:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <pvPortMalloc+0x148>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ec0:	e004      	b.n	8003ecc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d903      	bls.n	8003ede <pvPortMalloc+0x8e>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f1      	bne.n	8003ec2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ede:	4b2b      	ldr	r3, [pc, #172]	@ (8003f8c <pvPortMalloc+0x13c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d043      	beq.n	8003f70 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2208      	movs	r2, #8
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	1ad2      	subs	r2, r2, r3
 8003f02:	2308      	movs	r3, #8
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d917      	bls.n	8003f3a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	18d3      	adds	r3, r2, r3
 8003f10:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2207      	movs	r2, #7
 8003f16:	4013      	ands	r3, r2
 8003f18:	d002      	beq.n	8003f20 <pvPortMalloc+0xd0>
 8003f1a:	b672      	cpsid	i
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	e7fd      	b.n	8003f1c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 f8dd 	bl	80040f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f3a:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <pvPortMalloc+0x144>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	4b13      	ldr	r3, [pc, #76]	@ (8003f94 <pvPortMalloc+0x144>)
 8003f46:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <pvPortMalloc+0x144>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <pvPortMalloc+0x14c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d203      	bcs.n	8003f5c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <pvPortMalloc+0x144>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <pvPortMalloc+0x14c>)
 8003f5a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <pvPortMalloc+0x140>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f70:	f7ff fb84 	bl	800367c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2207      	movs	r2, #7
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d002      	beq.n	8003f82 <pvPortMalloc+0x132>
 8003f7c:	b672      	cpsid	i
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	e7fd      	b.n	8003f7e <pvPortMalloc+0x12e>
	return pvReturn;
 8003f82:	68fb      	ldr	r3, [r7, #12]
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b006      	add	sp, #24
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200010b4 	.word	0x200010b4
 8003f90:	200010c0 	.word	0x200010c0
 8003f94:	200010b8 	.word	0x200010b8
 8003f98:	200010ac 	.word	0x200010ac
 8003f9c:	200010bc 	.word	0x200010bc

08003fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d037      	beq.n	8004022 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	425b      	negs	r3, r3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4b19      	ldr	r3, [pc, #100]	@ (800402c <vPortFree+0x8c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d102      	bne.n	8003fd2 <vPortFree+0x32>
 8003fcc:	b672      	cpsid	i
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	e7fd      	b.n	8003fce <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <vPortFree+0x40>
 8003fda:	b672      	cpsid	i
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	e7fd      	b.n	8003fdc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4b11      	ldr	r3, [pc, #68]	@ (800402c <vPortFree+0x8c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d01a      	beq.n	8004022 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <vPortFree+0x8c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	401a      	ands	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004004:	f7ff fb2e 	bl	8003664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <vPortFree+0x90>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	18d2      	adds	r2, r2, r3
 8004012:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <vPortFree+0x90>)
 8004014:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0018      	movs	r0, r3
 800401a:	f000 f86b 	bl	80040f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800401e:	f7ff fb2d 	bl	800367c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	200010c0 	.word	0x200010c0
 8004030:	200010b8 	.word	0x200010b8

08004034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800403a:	23c0      	movs	r3, #192	@ 0xc0
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004040:	4b26      	ldr	r3, [pc, #152]	@ (80040dc <prvHeapInit+0xa8>)
 8004042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2207      	movs	r2, #7
 8004048:	4013      	ands	r3, r2
 800404a:	d00c      	beq.n	8004066 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3307      	adds	r3, #7
 8004050:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2207      	movs	r2, #7
 8004056:	4393      	bics	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	4b1e      	ldr	r3, [pc, #120]	@ (80040dc <prvHeapInit+0xa8>)
 8004062:	18d3      	adds	r3, r2, r3
 8004064:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800406a:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <prvHeapInit+0xac>)
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004070:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <prvHeapInit+0xac>)
 8004072:	2200      	movs	r2, #0
 8004074:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	18d3      	adds	r3, r2, r3
 800407c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800407e:	2208      	movs	r2, #8
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2207      	movs	r2, #7
 800408a:	4393      	bics	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <prvHeapInit+0xb0>)
 8004092:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004094:	4b13      	ldr	r3, [pc, #76]	@ (80040e4 <prvHeapInit+0xb0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <prvHeapInit+0xb0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	1ad2      	subs	r2, r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040b2:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <prvHeapInit+0xb0>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <prvHeapInit+0xb4>)
 80040c0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <prvHeapInit+0xb8>)
 80040c8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040ca:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <prvHeapInit+0xbc>)
 80040cc:	2280      	movs	r2, #128	@ 0x80
 80040ce:	0612      	lsls	r2, r2, #24
 80040d0:	601a      	str	r2, [r3, #0]
}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	200004ac 	.word	0x200004ac
 80040e0:	200010ac 	.word	0x200010ac
 80040e4:	200010b4 	.word	0x200010b4
 80040e8:	200010bc 	.word	0x200010bc
 80040ec:	200010b8 	.word	0x200010b8
 80040f0:	200010c0 	.word	0x200010c0

080040f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <prvInsertBlockIntoFreeList+0xa8>)
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e002      	b.n	8004108 <prvInsertBlockIntoFreeList+0x14>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d8f7      	bhi.n	8004102 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	18d3      	adds	r3, r2, r3
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d108      	bne.n	8004136 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	18d2      	adds	r2, r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	18d2      	adds	r2, r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d118      	bne.n	800417c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <prvInsertBlockIntoFreeList+0xac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d00d      	beq.n	8004172 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	18d2      	adds	r2, r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e008      	b.n	8004184 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004172:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <prvInsertBlockIntoFreeList+0xac>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e003      	b.n	8004184 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d002      	beq.n	8004192 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b004      	add	sp, #16
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	200010ac 	.word	0x200010ac
 80041a0:	200010b4 	.word	0x200010b4

080041a4 <memset>:
 80041a4:	0003      	movs	r3, r0
 80041a6:	1882      	adds	r2, r0, r2
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	7019      	strb	r1, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	2600      	movs	r6, #0
 80041b8:	4c0c      	ldr	r4, [pc, #48]	@ (80041ec <__libc_init_array+0x38>)
 80041ba:	4d0d      	ldr	r5, [pc, #52]	@ (80041f0 <__libc_init_array+0x3c>)
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	2600      	movs	r6, #0
 80041c6:	f000 f819 	bl	80041fc <_init>
 80041ca:	4c0a      	ldr	r4, [pc, #40]	@ (80041f4 <__libc_init_array+0x40>)
 80041cc:	4d0a      	ldr	r5, [pc, #40]	@ (80041f8 <__libc_init_array+0x44>)
 80041ce:	1b64      	subs	r4, r4, r5
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	00b3      	lsls	r3, r6, #2
 80041da:	58eb      	ldr	r3, [r5, r3]
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	00b3      	lsls	r3, r6, #2
 80041e4:	58eb      	ldr	r3, [r5, r3]
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	0800430c 	.word	0x0800430c
 80041f0:	0800430c 	.word	0x0800430c
 80041f4:	08004310 	.word	0x08004310
 80041f8:	0800430c 	.word	0x0800430c

080041fc <_init>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr

08004208 <_fini>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr
